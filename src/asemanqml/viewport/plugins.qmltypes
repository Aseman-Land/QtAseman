import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable AsemanQml.Viewport 2.0'

Module {
    dependencies: [
        "AsemanQml.Base 2.0",
        "QtGraphicalEffects 1.12",
        "QtQml 2.1",
        "QtQml.Models 2.2",
        "QtQuick 2.9",
        "QtQuick.Controls 2.5",
        "QtQuick.Controls.Fusion 2.12",
        "QtQuick.Controls.Fusion.impl 2.12",
        "QtQuick.Controls.IOSStyle 2.12",
        "QtQuick.Controls.IOSStyle.impl 2.12",
        "QtQuick.Controls.Imagine 2.12",
        "QtQuick.Controls.Imagine.impl 2.12",
        "QtQuick.Controls.Material 2.12",
        "QtQuick.Controls.Material.impl 2.12",
        "QtQuick.Controls.Styles 1.4",
        "QtQuick.Controls.Styles.Plasma 2.0",
        "QtQuick.Controls.Universal 2.12",
        "QtQuick.Controls.Universal.impl 2.12",
        "QtQuick.Controls.impl 2.12",
        "QtQuick.Extras 1.4",
        "QtQuick.Layouts 1.4",
        "QtQuick.Templates 2.5",
        "QtQuick.Window 2.2",
        "org.kde.kconfig 1.0",
        "org.kde.kirigami 2.9",
        "org.kde.kquickcontrolsaddons 2.0",
        "org.kde.plasma.components 2.0",
        "org.kde.plasma.core 2.0",
        "org.kde.plasma.extras 2.0"
    ]
    Component {
        name: "AsemanAbstractViewportType"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["AsemanQml.Viewport/AbstractViewportTypeCore 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "backgroundItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "foregroundItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "viewport"; type: "AsemanViewport"; isPointer: true }
        Property { name: "open"; type: "bool" }
        Property { name: "gestureWidth"; type: "double" }
        Property { name: "gestureWidthIsNull"; type: "bool"; isReadonly: true }
        Property { name: "touchToClose"; type: "bool" }
        Property { name: "touchToCloseIsNull"; type: "bool"; isReadonly: true }
        Property { name: "blockBack"; type: "bool" }
        Property { name: "blockBackIsNull"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "AsemanViewport"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["AsemanQml.Viewport/ViewportCore 2.0"]
        exportMetaObjectRevisions: [0]
        attachedType: "AsemanViewportAttechedProperty"
        Property { name: "items"; type: "AsemanViewportItem"; isList: true; isReadonly: true }
        Property { name: "keys"; type: "QStringList"; isReadonly: true }
        Signal { name: "viewportChanged" }
        Method {
            name: "getComponent"
            type: "QVariant"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "createComponent"
            type: "QQmlComponent*"
            Parameter { name: "fileUrl"; type: "QUrl" }
            Parameter { name: "asyn"; type: "bool" }
        }
        Method {
            name: "createComponent"
            type: "QQmlComponent*"
            Parameter { name: "fileUrl"; type: "QUrl" }
        }
    }
    Component {
        name: "AsemanViewportAttechedProperty"
        prototype: "QObject"
        Property {
            name: "controller"
            type: "AsemanViewportController"
            isReadonly: true
            isPointer: true
        }
        Property { name: "allControllers"; type: "QList<AsemanViewportController*>"; isReadonly: true }
        Property { name: "viewport"; type: "AsemanViewport"; isReadonly: true; isPointer: true }
        Signal { name: "controllersChanged" }
    }
    Component {
        name: "AsemanViewportController"
        defaultProperty: "routes"
        prototype: "QObject"
        exports: ["AsemanQml.Viewport/ViewportControllerCore 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "routes"; type: "AsemanViewportControllerRoute"; isList: true; isReadonly: true }
        Property { name: "viewport"; type: "AsemanViewport"; isPointer: true }
        Property { name: "allowRecursiveTrigger"; type: "bool" }
        Method {
            name: "lookup"
            type: "QVariantMap"
            Parameter { name: "url"; type: "string" }
            Parameter { name: "properties"; type: "QVariantMap" }
            Parameter { name: "viewport"; type: "AsemanViewport"; isPointer: true }
        }
        Method {
            name: "lookup"
            type: "QVariantMap"
            Parameter { name: "url"; type: "string" }
            Parameter { name: "properties"; type: "QVariantMap" }
        }
        Method {
            name: "lookup"
            type: "QVariantMap"
            Parameter { name: "url"; type: "string" }
        }
    }
    Component {
        name: "AsemanViewportControllerRoute"
        defaultProperty: "sourceComponent"
        prototype: "QObject"
        exports: ["AsemanQml.Viewport/ViewportControllerRoute 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "route"; type: "QRegExp" }
        Property { name: "sourceComponent"; type: "QQmlComponent"; isPointer: true }
        Property { name: "source"; type: "QUrl" }
        Property { name: "viewportType"; type: "string" }
        Signal { name: "componentChanged" }
    }
    Component {
        name: "AsemanViewportItem"
        prototype: "QObject"
        exports: ["AsemanQml.Viewport/ViewportItem 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string" }
        Property { name: "component"; type: "QVariant" }
    }
    Component {
        name: "AsemanViewportType"
        prototype: "QObject"
        exports: ["AsemanQml.Viewport/ViewportType 2.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        attachedType: "AsemanViewportTypeAttechedProperty"
    }
    Component {
        name: "AsemanViewportTypeAttechedProperty"
        prototype: "QObject"
        Property { name: "gestureWidth"; type: "double" }
        Property { name: "touchToClose"; type: "bool" }
        Property { name: "blockBack"; type: "bool" }
        Property { name: "open"; type: "bool" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Viewport/AbstractViewportType 2.0"
        exports: ["AsemanQml.Viewport/AbstractViewportType 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "list"; type: "AsemanListObject"; isPointer: true }
        Property { name: "fillForeground"; type: "bool" }
        Property { name: "index"; type: "int" }
        Property { name: "count"; type: "int" }
        Property { name: "openedType"; type: "string" }
        Property { name: "ratio"; type: "double" }
        Property { name: "background"; type: "RoundedItem_QMLTYPE_2"; isReadonly: true; isPointer: true }
        Property { name: "backgroundScene"; type: "QQuickRectangle"; isReadonly: true; isPointer: true }
        Property { name: "foreground"; type: "RoundedItem_QMLTYPE_2"; isReadonly: true; isPointer: true }
        Property { name: "foregroundScene"; type: "QQuickRectangle"; isReadonly: true; isPointer: true }
        Method { name: "back"; type: "QVariant" }
        Property { name: "backgroundItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "foregroundItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "viewport"; type: "AsemanViewport"; isPointer: true }
        Property { name: "open"; type: "bool" }
        Property { name: "gestureWidth"; type: "double" }
        Property { name: "gestureWidthIsNull"; type: "bool"; isReadonly: true }
        Property { name: "touchToClose"; type: "bool" }
        Property { name: "touchToCloseIsNull"; type: "bool"; isReadonly: true }
        Property { name: "blockBack"; type: "bool" }
        Property { name: "blockBackIsNull"; type: "bool"; isReadonly: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Viewport/AndroidActivityViewport 2.0"
        exports: ["AsemanQml.Viewport/AndroidActivityViewport 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "openRatio"; type: "double" }
        Property { name: "mouseRatio"; type: "double" }
        Property { name: "realRatio"; type: "double"; isReadonly: true }
        Property { name: "list"; type: "AsemanListObject"; isPointer: true }
        Property { name: "fillForeground"; type: "bool" }
        Property { name: "index"; type: "int" }
        Property { name: "count"; type: "int" }
        Property { name: "openedType"; type: "string" }
        Property { name: "ratio"; type: "double" }
        Property { name: "background"; type: "RoundedItem_QMLTYPE_2"; isReadonly: true; isPointer: true }
        Property { name: "backgroundScene"; type: "QQuickRectangle"; isReadonly: true; isPointer: true }
        Property { name: "foreground"; type: "RoundedItem_QMLTYPE_2"; isReadonly: true; isPointer: true }
        Property { name: "foregroundScene"; type: "QQuickRectangle"; isReadonly: true; isPointer: true }
        Method { name: "back"; type: "QVariant" }
        Property { name: "backgroundItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "foregroundItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "viewport"; type: "AsemanViewport"; isPointer: true }
        Property { name: "open"; type: "bool" }
        Property { name: "gestureWidth"; type: "double" }
        Property { name: "gestureWidthIsNull"; type: "bool"; isReadonly: true }
        Property { name: "touchToClose"; type: "bool" }
        Property { name: "touchToCloseIsNull"; type: "bool"; isReadonly: true }
        Property { name: "blockBack"; type: "bool" }
        Property { name: "blockBackIsNull"; type: "bool"; isReadonly: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Viewport/AndroidBottomDrawerViewport 2.0"
        exports: ["AsemanQml.Viewport/AndroidBottomDrawerViewport 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "openRatio"; type: "double" }
        Property { name: "list"; type: "AsemanListObject"; isPointer: true }
        Property { name: "fillForeground"; type: "bool" }
        Property { name: "index"; type: "int" }
        Property { name: "count"; type: "int" }
        Property { name: "openedType"; type: "string" }
        Property { name: "ratio"; type: "double" }
        Property { name: "background"; type: "RoundedItem_QMLTYPE_2"; isReadonly: true; isPointer: true }
        Property { name: "backgroundScene"; type: "QQuickRectangle"; isReadonly: true; isPointer: true }
        Property { name: "foreground"; type: "RoundedItem_QMLTYPE_2"; isReadonly: true; isPointer: true }
        Property { name: "foregroundScene"; type: "QQuickRectangle"; isReadonly: true; isPointer: true }
        Method { name: "back"; type: "QVariant" }
        Property { name: "backgroundItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "foregroundItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "viewport"; type: "AsemanViewport"; isPointer: true }
        Property { name: "open"; type: "bool" }
        Property { name: "gestureWidth"; type: "double" }
        Property { name: "gestureWidthIsNull"; type: "bool"; isReadonly: true }
        Property { name: "touchToClose"; type: "bool" }
        Property { name: "touchToCloseIsNull"; type: "bool"; isReadonly: true }
        Property { name: "blockBack"; type: "bool" }
        Property { name: "blockBackIsNull"; type: "bool"; isReadonly: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Viewport/AndroidDefaultPagesViewport 2.0"
        exports: ["AsemanQml.Viewport/AndroidDefaultPagesViewport 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "list"; type: "AsemanListObject"; isPointer: true }
        Property { name: "fillForeground"; type: "bool" }
        Property { name: "index"; type: "int" }
        Property { name: "count"; type: "int" }
        Property { name: "openedType"; type: "string" }
        Property { name: "ratio"; type: "double" }
        Property { name: "background"; type: "RoundedItem_QMLTYPE_2"; isReadonly: true; isPointer: true }
        Property { name: "backgroundScene"; type: "QQuickRectangle"; isReadonly: true; isPointer: true }
        Property { name: "foreground"; type: "RoundedItem_QMLTYPE_2"; isReadonly: true; isPointer: true }
        Property { name: "foregroundScene"; type: "QQuickRectangle"; isReadonly: true; isPointer: true }
        Method { name: "back"; type: "QVariant" }
        Property { name: "backgroundItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "foregroundItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "viewport"; type: "AsemanViewport"; isPointer: true }
        Property { name: "open"; type: "bool" }
        Property { name: "gestureWidth"; type: "double" }
        Property { name: "gestureWidthIsNull"; type: "bool"; isReadonly: true }
        Property { name: "touchToClose"; type: "bool" }
        Property { name: "touchToCloseIsNull"; type: "bool"; isReadonly: true }
        Property { name: "blockBack"; type: "bool" }
        Property { name: "blockBackIsNull"; type: "bool"; isReadonly: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Viewport/AndroidDialogViewport 2.0"
        exports: ["AsemanQml.Viewport/AndroidDialogViewport 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "list"; type: "AsemanListObject"; isPointer: true }
        Property { name: "fillForeground"; type: "bool" }
        Property { name: "index"; type: "int" }
        Property { name: "count"; type: "int" }
        Property { name: "openedType"; type: "string" }
        Property { name: "ratio"; type: "double" }
        Property { name: "background"; type: "RoundedItem_QMLTYPE_2"; isReadonly: true; isPointer: true }
        Property { name: "backgroundScene"; type: "QQuickRectangle"; isReadonly: true; isPointer: true }
        Property { name: "foreground"; type: "RoundedItem_QMLTYPE_2"; isReadonly: true; isPointer: true }
        Property { name: "foregroundScene"; type: "QQuickRectangle"; isReadonly: true; isPointer: true }
        Method { name: "back"; type: "QVariant" }
        Property { name: "backgroundItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "foregroundItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "viewport"; type: "AsemanViewport"; isPointer: true }
        Property { name: "open"; type: "bool" }
        Property { name: "gestureWidth"; type: "double" }
        Property { name: "gestureWidthIsNull"; type: "bool"; isReadonly: true }
        Property { name: "touchToClose"; type: "bool" }
        Property { name: "touchToCloseIsNull"; type: "bool"; isReadonly: true }
        Property { name: "blockBack"; type: "bool" }
        Property { name: "blockBackIsNull"; type: "bool"; isReadonly: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Viewport/IOSBottomDrawerViewport 2.0"
        exports: ["AsemanQml.Viewport/IOSBottomDrawerViewport 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "openRatio"; type: "double" }
        Property { name: "list"; type: "AsemanListObject"; isPointer: true }
        Property { name: "fillForeground"; type: "bool" }
        Property { name: "index"; type: "int" }
        Property { name: "count"; type: "int" }
        Property { name: "openedType"; type: "string" }
        Property { name: "ratio"; type: "double" }
        Property { name: "background"; type: "RoundedItem_QMLTYPE_2"; isReadonly: true; isPointer: true }
        Property { name: "backgroundScene"; type: "QQuickRectangle"; isReadonly: true; isPointer: true }
        Property { name: "foreground"; type: "RoundedItem_QMLTYPE_2"; isReadonly: true; isPointer: true }
        Property { name: "foregroundScene"; type: "QQuickRectangle"; isReadonly: true; isPointer: true }
        Method { name: "back"; type: "QVariant" }
        Property { name: "backgroundItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "foregroundItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "viewport"; type: "AsemanViewport"; isPointer: true }
        Property { name: "open"; type: "bool" }
        Property { name: "gestureWidth"; type: "double" }
        Property { name: "gestureWidthIsNull"; type: "bool"; isReadonly: true }
        Property { name: "touchToClose"; type: "bool" }
        Property { name: "touchToCloseIsNull"; type: "bool"; isReadonly: true }
        Property { name: "blockBack"; type: "bool" }
        Property { name: "blockBackIsNull"; type: "bool"; isReadonly: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Viewport/IOSDialogViewport 2.0"
        exports: ["AsemanQml.Viewport/IOSDialogViewport 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "list"; type: "AsemanListObject"; isPointer: true }
        Property { name: "fillForeground"; type: "bool" }
        Property { name: "index"; type: "int" }
        Property { name: "count"; type: "int" }
        Property { name: "openedType"; type: "string" }
        Property { name: "ratio"; type: "double" }
        Property { name: "background"; type: "RoundedItem_QMLTYPE_2"; isReadonly: true; isPointer: true }
        Property { name: "backgroundScene"; type: "QQuickRectangle"; isReadonly: true; isPointer: true }
        Property { name: "foreground"; type: "RoundedItem_QMLTYPE_2"; isReadonly: true; isPointer: true }
        Property { name: "foregroundScene"; type: "QQuickRectangle"; isReadonly: true; isPointer: true }
        Method { name: "back"; type: "QVariant" }
        Property { name: "backgroundItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "foregroundItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "viewport"; type: "AsemanViewport"; isPointer: true }
        Property { name: "open"; type: "bool" }
        Property { name: "gestureWidth"; type: "double" }
        Property { name: "gestureWidthIsNull"; type: "bool"; isReadonly: true }
        Property { name: "touchToClose"; type: "bool" }
        Property { name: "touchToCloseIsNull"; type: "bool"; isReadonly: true }
        Property { name: "blockBack"; type: "bool" }
        Property { name: "blockBackIsNull"; type: "bool"; isReadonly: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Viewport/IOSNormalViewport 2.0"
        exports: ["AsemanQml.Viewport/IOSNormalViewport 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "openRatio"; type: "double" }
        Property { name: "mouseRatio"; type: "double" }
        Property { name: "foregroundX"; type: "double"; isReadonly: true }
        Property { name: "list"; type: "AsemanListObject"; isPointer: true }
        Property { name: "fillForeground"; type: "bool" }
        Property { name: "index"; type: "int" }
        Property { name: "count"; type: "int" }
        Property { name: "openedType"; type: "string" }
        Property { name: "ratio"; type: "double" }
        Property { name: "background"; type: "RoundedItem_QMLTYPE_2"; isReadonly: true; isPointer: true }
        Property { name: "backgroundScene"; type: "QQuickRectangle"; isReadonly: true; isPointer: true }
        Property { name: "foreground"; type: "RoundedItem_QMLTYPE_2"; isReadonly: true; isPointer: true }
        Property { name: "foregroundScene"; type: "QQuickRectangle"; isReadonly: true; isPointer: true }
        Method { name: "back"; type: "QVariant" }
        Property { name: "backgroundItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "foregroundItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "viewport"; type: "AsemanViewport"; isPointer: true }
        Property { name: "open"; type: "bool" }
        Property { name: "gestureWidth"; type: "double" }
        Property { name: "gestureWidthIsNull"; type: "bool"; isReadonly: true }
        Property { name: "touchToClose"; type: "bool" }
        Property { name: "touchToCloseIsNull"; type: "bool"; isReadonly: true }
        Property { name: "blockBack"; type: "bool" }
        Property { name: "blockBackIsNull"; type: "bool"; isReadonly: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Viewport/IOSPopupViewport 2.0"
        exports: ["AsemanQml.Viewport/IOSPopupViewport 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "topPadSize"; type: "double"; isReadonly: true }
        Property { name: "openRatio"; type: "double" }
        Property { name: "mouseRatio"; type: "double" }
        Property { name: "foregroundScale"; type: "double"; isReadonly: true }
        Property { name: "foregroundHeight"; type: "double"; isReadonly: true }
        Property { name: "realRatio"; type: "double"; isReadonly: true }
        Property { name: "isIOSPopup"; type: "bool"; isReadonly: true }
        Property { name: "nextItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "iosBelowIndex"; type: "int"; isReadonly: true }
        Property { name: "list"; type: "AsemanListObject"; isPointer: true }
        Property { name: "fillForeground"; type: "bool" }
        Property { name: "index"; type: "int" }
        Property { name: "count"; type: "int" }
        Property { name: "openedType"; type: "string" }
        Property { name: "ratio"; type: "double" }
        Property { name: "background"; type: "RoundedItem_QMLTYPE_2"; isReadonly: true; isPointer: true }
        Property { name: "backgroundScene"; type: "QQuickRectangle"; isReadonly: true; isPointer: true }
        Property { name: "foreground"; type: "RoundedItem_QMLTYPE_2"; isReadonly: true; isPointer: true }
        Property { name: "foregroundScene"; type: "QQuickRectangle"; isReadonly: true; isPointer: true }
        Method { name: "back"; type: "QVariant" }
        Property { name: "backgroundItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "foregroundItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "viewport"; type: "AsemanViewport"; isPointer: true }
        Property { name: "open"; type: "bool" }
        Property { name: "gestureWidth"; type: "double" }
        Property { name: "gestureWidthIsNull"; type: "bool"; isReadonly: true }
        Property { name: "touchToClose"; type: "bool" }
        Property { name: "touchToCloseIsNull"; type: "bool"; isReadonly: true }
        Property { name: "blockBack"; type: "bool" }
        Property { name: "blockBackIsNull"; type: "bool"; isReadonly: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Viewport/NoneViewport 2.0"
        exports: ["AsemanQml.Viewport/NoneViewport 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "list"; type: "AsemanListObject"; isPointer: true }
        Property { name: "fillForeground"; type: "bool" }
        Property { name: "index"; type: "int" }
        Property { name: "count"; type: "int" }
        Property { name: "openedType"; type: "string" }
        Property { name: "ratio"; type: "double" }
        Property { name: "background"; type: "RoundedItem_QMLTYPE_2"; isReadonly: true; isPointer: true }
        Property { name: "backgroundScene"; type: "QQuickRectangle"; isReadonly: true; isPointer: true }
        Property { name: "foreground"; type: "RoundedItem_QMLTYPE_2"; isReadonly: true; isPointer: true }
        Property { name: "foregroundScene"; type: "QQuickRectangle"; isReadonly: true; isPointer: true }
        Method { name: "back"; type: "QVariant" }
        Property { name: "backgroundItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "foregroundItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "viewport"; type: "AsemanViewport"; isPointer: true }
        Property { name: "open"; type: "bool" }
        Property { name: "gestureWidth"; type: "double" }
        Property { name: "gestureWidthIsNull"; type: "bool"; isReadonly: true }
        Property { name: "touchToClose"; type: "bool" }
        Property { name: "touchToCloseIsNull"; type: "bool"; isReadonly: true }
        Property { name: "blockBack"; type: "bool" }
        Property { name: "blockBackIsNull"; type: "bool"; isReadonly: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Viewport/Viewport 2.0"
        exports: ["AsemanQml.Viewport/Viewport 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "androidStyle"; type: "bool" }
        Property { name: "mainItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "currentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "currentType"; type: "string"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Method {
            name: "append"
            type: "QVariant"
            Parameter { name: "component"; type: "QVariant" }
            Parameter { name: "properties"; type: "QVariant" }
            Parameter { name: "type"; type: "QVariant" }
        }
        Method { name: "closeLast"; type: "QVariant" }
        Property { name: "items"; type: "AsemanViewportItem"; isList: true; isReadonly: true }
        Property { name: "keys"; type: "QStringList"; isReadonly: true }
        Signal { name: "viewportChanged" }
        Method {
            name: "getComponent"
            type: "QVariant"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "createComponent"
            type: "QQmlComponent*"
            Parameter { name: "fileUrl"; type: "QUrl" }
            Parameter { name: "asyn"; type: "bool" }
        }
        Method {
            name: "createComponent"
            type: "QQmlComponent*"
            Parameter { name: "fileUrl"; type: "QUrl" }
        }
    }
    Component {
        prototype: "QObject"
        name: "AsemanQml.Viewport/ViewportController 2.0"
        exports: ["AsemanQml.Viewport/ViewportController 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "routes"
        Method {
            name: "trigger"
            type: "QVariant"
            Parameter { name: "url"; type: "QVariant" }
            Parameter { name: "properties"; type: "QVariant" }
            Parameter { name: "viewport"; type: "QVariant" }
        }
        Property { name: "routes"; type: "AsemanViewportControllerRoute"; isList: true; isReadonly: true }
        Property { name: "viewport"; type: "AsemanViewport"; isPointer: true }
        Property { name: "allowRecursiveTrigger"; type: "bool" }
        Method {
            name: "lookup"
            type: "QVariantMap"
            Parameter { name: "url"; type: "string" }
            Parameter { name: "properties"; type: "QVariantMap" }
            Parameter { name: "viewport"; type: "AsemanViewport"; isPointer: true }
        }
        Method {
            name: "lookup"
            type: "QVariantMap"
            Parameter { name: "url"; type: "string" }
            Parameter { name: "properties"; type: "QVariantMap" }
        }
        Method {
            name: "lookup"
            type: "QVariantMap"
            Parameter { name: "url"; type: "string" }
        }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Viewport/ViewportPage 2.0"
        exports: ["AsemanQml.Viewport/ViewportPage 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "pageData"
        Property { name: "header"; type: "QQuickItem"; isPointer: true }
        Property { name: "title"; type: "string" }
        Property { name: "pageData"; type: "QObject"; isList: true; isReadonly: true }
    }
}
