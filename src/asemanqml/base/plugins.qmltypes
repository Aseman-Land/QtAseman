import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable AsemanQml.Base 2.0'

Module {
    dependencies: ["QtQuick 2.8"]
    Component {
        name: "AsemanAbstractListModel"
        prototype: "QAbstractListModel"
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "roleName"; type: "string" }
        }
        Method {
            name: "get"
            type: "QVariantMap"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "roles"; type: "QStringList" }
    }
    Component {
        name: "AsemanApplication"
        prototype: "QObject"
        Enum {
            name: "ApplicationType"
            values: {
                "NoneApplication": 0,
                "GuiApplication": 1,
                "CoreApplication": 2
            }
        }
        Enum {
            name: "ApplicationState"
            values: {
                "ApplicationSuspended": 0,
                "ApplicationHidden": 1,
                "ApplicationInactive": 2,
                "ApplicationActive": 4
            }
        }
        Property { name: "homePath"; type: "string"; isReadonly: true }
        Property { name: "startPath"; type: "string"; isReadonly: true }
        Property { name: "appPath"; type: "string"; isReadonly: true }
        Property { name: "appFilePath"; type: "string"; isReadonly: true }
        Property { name: "logPath"; type: "string" }
        Property { name: "confsPath"; type: "string"; isReadonly: true }
        Property { name: "tempPath"; type: "string"; isReadonly: true }
        Property { name: "backupsPath"; type: "string"; isReadonly: true }
        Property { name: "cameraPath"; type: "string"; isReadonly: true }
        Property { name: "appType"; type: "int"; isReadonly: true }
        Property { name: "isDebug"; type: "bool"; isReadonly: true }
        Property { name: "globalFont"; type: "QFont" }
        Property { name: "applicationName"; type: "string" }
        Property { name: "applicationVersion"; type: "string" }
        Property { name: "organizationName"; type: "string" }
        Property { name: "organizationDomain"; type: "string" }
        Property { name: "applicationAbout"; type: "string" }
        Property { name: "qpaNoTextHandles"; type: "bool" }
        Property { name: "windowIcon"; type: "QUrl" }
        Property { name: "applicationState"; type: "int"; isReadonly: true }
        Property { name: "applicationDisplayName"; type: "string" }
        Property { name: "platformName"; type: "string"; isReadonly: true }
        Property { name: "quitOnLastWindowClosed"; type: "bool" }
        Signal { name: "fakeSignal" }
        Signal { name: "globalFontFamilyChanged" }
        Signal { name: "globalMonoFontFamilyChanged" }
        Signal { name: "languageUpdated" }
        Signal { name: "backRequest" }
        Signal { name: "clickedOnDock" }
        Signal { name: "lastWindowClosed" }
        Method { name: "refreshTranslations" }
        Method { name: "back" }
        Method { name: "exec"; type: "int" }
        Method {
            name: "exit"
            Parameter { name: "retcode"; type: "int" }
        }
        Method { name: "exit" }
        Method {
            name: "sleep"
            Parameter { name: "ms"; type: "qulonglong" }
        }
        Method {
            name: "setSetting"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "readSetting"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "defaultValue"; type: "QVariant" }
        }
        Method {
            name: "readSetting"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
        }
    }
    Component {
        name: "AsemanApplicationItem"
        defaultProperty: "items"
        prototype: "AsemanApplication"
        exports: [
            "AsemanQml.Base/AsemanApp 2.0",
            "AsemanQml.Base/AsemanApplicationBase 2.0"
        ]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0, 0]
        Property { name: "proxy"; type: "AsemanNetworkProxy"; isPointer: true }
        Property { name: "applicationId"; type: "string" }
        Property { name: "isRunning"; type: "bool"; isReadonly: true }
        Property { name: "items"; type: "QObject"; isList: true; isReadonly: true }
        Signal {
            name: "messageReceived"
            Parameter { name: "msg"; type: "string" }
        }
        Method {
            name: "sendMessage"
            Parameter { name: "msg"; type: "string" }
        }
        Method {
            name: "requestPermissions"
            type: "QVariantMap"
            Parameter { name: "persmissions"; type: "QStringList" }
            Parameter { name: "callback"; type: "QJSValue" }
        }
    }
    Component {
        name: "AsemanAutoStartManager"
        prototype: "QObject"
        exports: ["AsemanQml.Base/AutoStartManager 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "command"; type: "string" }
        Property { name: "comment"; type: "string" }
        Property { name: "source"; type: "string" }
        Property { name: "name"; type: "string" }
        Property { name: "type"; type: "string" }
        Property { name: "active"; type: "bool" }
        Method { name: "refresh" }
        Method { name: "save" }
    }
    Component {
        name: "AsemanBackHandler"
        prototype: "QObject"
        exports: ["AsemanQml.Base/BackHandler 2.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "topHandlerObject"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "topHandlerMethod"; type: "QJSValue"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Signal { name: "topHandlerChanged" }
        Signal { name: "backFinished" }
        Method {
            name: "pushHandler"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "jsv"; type: "QJSValue" }
        }
        Method {
            name: "pushDownHandler"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "jsv"; type: "QJSValue" }
        }
        Method {
            name: "removeHandler"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
        }
        Method { name: "tryPopHandler"; type: "QObject*" }
        Method { name: "forcePopHandler"; type: "QObject*" }
        Method { name: "clear" }
        Method { name: "back"; type: "bool" }
    }
    Component {
        name: "AsemanCalendarConverter"
        prototype: "QObject"
        exports: ["AsemanQml.Base/CalendarConv 2.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "calendar"; type: "int" }
        Property { name: "calendarsID"; type: "QStringList"; isReadonly: true }
        Property { name: "currentDays"; type: "int"; isReadonly: true }
        Property { name: "currentYear"; type: "int"; isReadonly: true }
        Property { name: "currentMonth"; type: "int"; isReadonly: true }
        Property { name: "currentDay"; type: "int"; isReadonly: true }
        Signal { name: "fakeSignal" }
        Method {
            name: "calendarName"
            type: "string"
            Parameter { name: "t"; type: "int" }
        }
        Method {
            name: "convertIntToStringDate"
            type: "string"
            Parameter { name: "d"; type: "qlonglong" }
        }
        Method {
            name: "convertIntToFullStringDate"
            type: "string"
            Parameter { name: "d"; type: "qlonglong" }
        }
        Method {
            name: "convertIntToNumStringDate"
            type: "string"
            Parameter { name: "d"; type: "qlonglong" }
        }
        Method {
            name: "translateInt"
            type: "string"
            Parameter { name: "d"; type: "qlonglong" }
        }
        Method {
            name: "convertIntToStringDate"
            type: "string"
            Parameter { name: "d"; type: "qlonglong" }
            Parameter { name: "format"; type: "string" }
        }
        Method {
            name: "convertDateToGragorian"
            type: "QDate"
            Parameter { name: "year"; type: "qlonglong" }
            Parameter { name: "month"; type: "int" }
            Parameter { name: "day"; type: "int" }
        }
        Method {
            name: "fromMSecSinceEpoch"
            type: "string"
            Parameter { name: "t"; type: "qlonglong" }
        }
        Method {
            name: "convertDateTimeToString"
            type: "string"
            Parameter { name: "dt"; type: "QDateTime" }
        }
        Method {
            name: "convertDateTimeToString"
            type: "string"
            Parameter { name: "dt"; type: "QDateTime" }
            Parameter { name: "format"; type: "string" }
        }
        Method {
            name: "convertDateTimeToLittleString"
            type: "string"
            Parameter { name: "dt"; type: "QDate" }
        }
        Method {
            name: "daysOfMonth"
            type: "int"
            Parameter { name: "year"; type: "qlonglong" }
            Parameter { name: "month"; type: "int" }
        }
        Method {
            name: "monthName"
            type: "string"
            Parameter { name: "month"; type: "int" }
        }
        Method {
            name: "combineDateAndTime"
            type: "QDateTime"
            Parameter { name: "date"; type: "QDate" }
            Parameter { name: "time"; type: "QTime" }
        }
        Method {
            name: "dateMonth"
            type: "int"
            Parameter { name: "date"; type: "QDate" }
        }
        Method {
            name: "dateDay"
            type: "int"
            Parameter { name: "date"; type: "QDate" }
        }
        Method {
            name: "dateYear"
            type: "qlonglong"
            Parameter { name: "date"; type: "QDate" }
        }
        Method {
            name: "convertDaysToDate"
            type: "QDate"
            Parameter { name: "days"; type: "int" }
        }
        Method {
            name: "convertDateToDays"
            type: "int"
            Parameter { name: "date"; type: "QDate" }
        }
        Method {
            name: "fromTime_t"
            type: "QDateTime"
            Parameter { name: "sec"; type: "uint" }
        }
    }
    Component {
        name: "AsemanCalendarModel"
        prototype: "QObject"
        exports: ["AsemanQml.Base/CalendarModel 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "CalendarTypes"
            values: {
                "CalendarGregorian": 0,
                "CalendarJalali": 1,
                "CalendarHijri": 2
            }
        }
        Property { name: "years"; type: "QList<int>"; isReadonly: true }
        Property { name: "months"; type: "QList<int>"; isReadonly: true }
        Property { name: "days"; type: "QList<int>"; isReadonly: true }
        Property { name: "hours"; type: "QList<int>"; isReadonly: true }
        Property { name: "minutes"; type: "QList<int>"; isReadonly: true }
        Property { name: "currentYearIndex"; type: "int"; isReadonly: true }
        Property { name: "currentMonthIndex"; type: "int"; isReadonly: true }
        Property { name: "currentDaysIndex"; type: "int"; isReadonly: true }
        Property { name: "currentHoursIndex"; type: "int"; isReadonly: true }
        Property { name: "currentMinutesIndex"; type: "int"; isReadonly: true }
        Property { name: "dateTime"; type: "QDateTime" }
        Property { name: "calendar"; type: "int" }
        Property { name: "minimum"; type: "QDateTime" }
        Property { name: "maximum"; type: "QDateTime" }
        Signal { name: "secondsChanged" }
        Method {
            name: "setConvertDate"
            Parameter { name: "yearIdx"; type: "int" }
            Parameter { name: "monthIdx"; type: "int" }
            Parameter { name: "dayIdx"; type: "int" }
            Parameter { name: "hourIdx"; type: "int" }
            Parameter { name: "minuteIdx"; type: "int" }
        }
        Method {
            name: "monthName"
            type: "string"
            Parameter { name: "month"; type: "int" }
        }
    }
    Component {
        name: "AsemanCountriesModel"
        prototype: "AsemanAbstractListModel"
        exports: ["AsemanQml.Base/CountriesModel 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ColorfullListModelRoles"
            values: {
                "NameRole": 256,
                "NativeNameRole": 257,
                "TldRole": 258,
                "Cca2Role": 259,
                "Ccn3Role": 260,
                "Cca3Role": 261,
                "CurrencyRole": 262,
                "CallingCodeRole": 263,
                "CapitalRole": 264,
                "AltSpellingsRole": 265,
                "RelevanceRole": 266,
                "RegionRole": 267,
                "SubregionRole": 268,
                "LanguageRole": 269,
                "LanguageCodesRole": 270,
                "TranslationsRole": 271,
                "LatlngRole": 272,
                "DemonymRole": 273,
                "BordersRole": 274,
                "AreaRole": 275,
                "KeyRole": 276
            }
        }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "filter"; type: "string" }
        Property { name: "systemCountry"; type: "string"; isReadonly: true }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "name"; type: "string" }
        }
    }
    Component {
        name: "AsemanDesktopTools"
        prototype: "QObject"
        exports: [
            "AsemanQml.Base/AsemanDesktopTools 2.0",
            "AsemanQml.Base/Desktop 2.0"
        ]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0, 0]
        Enum {
            name: "DesktopSession"
            values: {
                "Unknown": 0,
                "Gnome": 1,
                "GnomeFallBack": 2,
                "Unity": 3,
                "Kde": 4,
                "Plasma": 5,
                "Windows": 6,
                "Mac": 7
            }
        }
        Enum {
            name: "YesOrNoType"
            values: {
                "Warning": 0,
                "Question": 1,
                "Information": 2,
                "Critical": 3
            }
        }
        Property { name: "titleBarColor"; type: "QColor"; isReadonly: true }
        Property { name: "titleBarTransparentColor"; type: "QColor"; isReadonly: true }
        Property { name: "titleBarTextColor"; type: "QColor"; isReadonly: true }
        Property { name: "titleBarIsDark"; type: "bool"; isReadonly: true }
        Property { name: "desktopSession"; type: "int"; isReadonly: true }
        Property { name: "fontFamilies"; type: "QStringList"; isReadonly: true }
        Property { name: "menuStyle"; type: "string" }
        Property { name: "currentMenuObject"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "tooltip"; type: "string" }
        Signal { name: "fakeSignal" }
        Method {
            name: "getOpenFileName"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "filter"; type: "string" }
            Parameter { name: "startPath"; type: "string" }
        }
        Method {
            name: "getOpenFileName"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "filter"; type: "string" }
        }
        Method {
            name: "getOpenFileName"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
        }
        Method {
            name: "getOpenFileName"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
        }
        Method { name: "getOpenFileName"; type: "string" }
        Method {
            name: "getOpenFileNames"
            type: "QStringList"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "filter"; type: "string" }
            Parameter { name: "startPath"; type: "string" }
        }
        Method {
            name: "getOpenFileNames"
            type: "QStringList"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "filter"; type: "string" }
        }
        Method {
            name: "getOpenFileNames"
            type: "QStringList"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
        }
        Method {
            name: "getOpenFileNames"
            type: "QStringList"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
        }
        Method { name: "getOpenFileNames"; type: "QStringList" }
        Method {
            name: "getSaveFileName"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "filter"; type: "string" }
            Parameter { name: "startPath"; type: "string" }
        }
        Method {
            name: "getSaveFileName"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "filter"; type: "string" }
        }
        Method {
            name: "getSaveFileName"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
        }
        Method {
            name: "getSaveFileName"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
        }
        Method { name: "getSaveFileName"; type: "string" }
        Method {
            name: "getExistingDirectory"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "startPath"; type: "string" }
        }
        Method {
            name: "getExistingDirectory"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
        }
        Method {
            name: "getExistingDirectory"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
        }
        Method { name: "getExistingDirectory"; type: "string" }
        Method {
            name: "getFont"
            type: "QFont"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "font"; type: "QFont" }
        }
        Method {
            name: "getFont"
            type: "QFont"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
        }
        Method {
            name: "getFont"
            type: "QFont"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
        }
        Method { name: "getFont"; type: "QFont" }
        Method {
            name: "getColor"
            type: "QColor"
            Parameter { name: "color"; type: "QColor" }
        }
        Method { name: "getColor"; type: "QColor" }
        Method {
            name: "getText"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "text"; type: "string" }
            Parameter { name: "defaultText"; type: "string" }
        }
        Method {
            name: "getText"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "getText"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
        }
        Method {
            name: "getText"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
        }
        Method { name: "getText"; type: "string" }
        Method {
            name: "showMenu"
            type: "int"
            Parameter { name: "actions"; type: "QVariantList" }
            Parameter { name: "point"; type: "QPoint" }
        }
        Method {
            name: "showMenu"
            type: "int"
            Parameter { name: "actions"; type: "QVariantList" }
        }
        Method {
            name: "yesOrNo"
            type: "bool"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "text"; type: "string" }
            Parameter { name: "type"; type: "int" }
        }
        Method {
            name: "yesOrNo"
            type: "bool"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "showMessage"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "text"; type: "string" }
            Parameter { name: "type"; type: "int" }
        }
        Method {
            name: "showMessage"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "text"; type: "string" }
        }
    }
    Component {
        name: "AsemanDevices"
        prototype: "QObject"
        Property { name: "isMobile"; type: "bool"; isReadonly: true }
        Property { name: "isTablet"; type: "bool"; isReadonly: true }
        Property { name: "isLargeTablet"; type: "bool"; isReadonly: true }
        Property { name: "isTouchDevice"; type: "bool"; isReadonly: true }
        Property { name: "isDesktop"; type: "bool"; isReadonly: true }
        Property { name: "isMacX"; type: "bool"; isReadonly: true }
        Property { name: "isWindows"; type: "bool"; isReadonly: true }
        Property { name: "isWindows8"; type: "bool"; isReadonly: true }
        Property { name: "isLinux"; type: "bool"; isReadonly: true }
        Property { name: "isAndroid"; type: "bool"; isReadonly: true }
        Property { name: "isIOS"; type: "bool"; isReadonly: true }
        Property { name: "isUbuntuTouch"; type: "bool"; isReadonly: true }
        Property { name: "isWindowsPhone"; type: "bool"; isReadonly: true }
        Property { name: "screen"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "cameraIsAvailable"; type: "bool"; isReadonly: true }
        Property { name: "lcdPhysicalSize"; type: "double"; isReadonly: true }
        Property { name: "lcdPhysicalWidth"; type: "double"; isReadonly: true }
        Property { name: "lcdPhysicalHeight"; type: "double"; isReadonly: true }
        Property { name: "lcdDpiX"; type: "double"; isReadonly: true }
        Property { name: "lcdDpiY"; type: "double"; isReadonly: true }
        Property { name: "platformVersion"; type: "string"; isReadonly: true }
        Property { name: "platformType"; type: "string"; isReadonly: true }
        Property { name: "platformName"; type: "string"; isReadonly: true }
        Property { name: "platformKernel"; type: "string"; isReadonly: true }
        Property { name: "platformKernelVersion"; type: "string"; isReadonly: true }
        Property { name: "platformCpuArchitecture"; type: "string"; isReadonly: true }
        Property { name: "screenSize"; type: "QSize"; isReadonly: true }
        Property { name: "keyboardHeight"; type: "double"; isReadonly: true }
        Property { name: "localFilesPrePath"; type: "string"; isReadonly: true }
        Property { name: "densityDpi"; type: "int"; isReadonly: true }
        Property { name: "density"; type: "double"; isReadonly: true }
        Property { name: "deviceDensity"; type: "double"; isReadonly: true }
        Property { name: "fontDensity"; type: "double"; isReadonly: true }
        Property { name: "transparentStatusBar"; type: "bool" }
        Property { name: "transparentNavigationBar"; type: "bool" }
        Property { name: "standardTitleBarHeight"; type: "double"; isReadonly: true }
        Property { name: "statusBarHeight"; type: "double"; isReadonly: true }
        Property { name: "navigationBarHeight"; type: "double"; isReadonly: true }
        Property { name: "clipboard"; type: "string" }
        Property { name: "clipboardUrl"; type: "QList<QUrl>" }
        Property { name: "keyboard"; type: "bool"; isReadonly: true }
        Property { name: "cameraLocation"; type: "string"; isReadonly: true }
        Property { name: "picturesLocation"; type: "string"; isReadonly: true }
        Property { name: "musicsLocation"; type: "string"; isReadonly: true }
        Property { name: "documentsLocation"; type: "string"; isReadonly: true }
        Property { name: "downloadsLocation"; type: "string"; isReadonly: true }
        Property { name: "resourcePath"; type: "string"; isReadonly: true }
        Property { name: "libsPath"; type: "string"; isReadonly: true }
        Property { name: "deviceName"; type: "string"; isReadonly: true }
        Property { name: "deviceId"; type: "string"; isReadonly: true }
        Property { name: "deviceShortId"; type: "string"; isReadonly: true }
        Property { name: "qtVersion"; type: "string"; isReadonly: true }
        Property { name: "qtMajorVersion"; type: "double"; isReadonly: true }
        Property { name: "fontScale"; type: "double" }
        Property { name: "deviceDetails"; type: "QVariantMap"; isReadonly: true }
        Signal {
            name: "incomingShare"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "msg"; type: "string" }
        }
        Signal { name: "activityPaused" }
        Signal { name: "activityResumed" }
        Signal { name: "platformChanged" }
        Signal { name: "geometryChanged" }
        Method { name: "hideKeyboard" }
        Method { name: "showKeyboard" }
        Method {
            name: "share"
            Parameter { name: "subject"; type: "string" }
            Parameter { name: "message"; type: "string" }
        }
        Method {
            name: "openFile"
            type: "bool"
            Parameter { name: "address"; type: "string" }
        }
        Method {
            name: "shareFile"
            type: "bool"
            Parameter { name: "address"; type: "string" }
        }
        Method {
            name: "callNumber"
            Parameter { name: "number"; type: "string" }
        }
        Method {
            name: "setClipboard"
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "setClipboardData"
            Parameter { name: "mime"; type: "AsemanMimeData"; isPointer: true }
        }
        Method { name: "startCameraPicture"; type: "bool" }
        Method { name: "getOpenPictures"; type: "bool" }
        Method {
            name: "setFlag"
            Parameter { name: "flag"; type: "int" }
            Parameter { name: "state"; type: "bool" }
        }
        Method {
            name: "setFlag"
            Parameter { name: "flag"; type: "int" }
        }
        Method {
            name: "flag"
            type: "bool"
            Parameter { name: "flag"; type: "int" }
        }
    }
    Component {
        name: "AsemanDevicesItem"
        prototype: "AsemanDevices"
        exports: ["AsemanQml.Base/Devices 2.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Signal {
            name: "incomingImage"
            Parameter { name: "path"; type: "string" }
        }
        Signal {
            name: "selectImageResult"
            Parameter { name: "path"; type: "string" }
        }
        Method { name: "getOpenPictures"; type: "bool" }
    }
    Component {
        name: "AsemanDownloader"
        prototype: "QObject"
        exports: ["AsemanQml.Base/Downloader 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "recievedBytes"; type: "qlonglong"; isReadonly: true }
        Property { name: "totalBytes"; type: "qlonglong"; isReadonly: true }
        Property { name: "destination"; type: "string" }
        Property { name: "path"; type: "string" }
        Property { name: "downloaderId"; type: "int" }
        Property { name: "downloading"; type: "bool"; isReadonly: true }
        Signal {
            name: "error"
            Parameter { name: "error"; type: "QStringList" }
        }
        Signal {
            name: "finished"
            Parameter { name: "data"; type: "QByteArray" }
        }
        Signal {
            name: "finishedWithId"
            Parameter { name: "id"; type: "int" }
            Parameter { name: "data"; type: "QByteArray" }
        }
        Signal { name: "failed" }
        Method { name: "start" }
        Method { name: "stop" }
    }
    Component {
        name: "AsemanDragArea"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["AsemanQml.Base/MouseDragArea 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "orientation"; type: "int" }
        Property { name: "minimum"; type: "int" }
        Property { name: "mouseX"; type: "int"; isReadonly: true }
        Property { name: "mouseY"; type: "int"; isReadonly: true }
        Signal { name: "positionChanged" }
        Signal { name: "pressed" }
        Signal { name: "released" }
    }
    Component {
        name: "AsemanDragObject"
        prototype: "QObject"
        exports: ["AsemanQml.Base/DragObject 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "mimeData"; type: "AsemanMimeData"; isPointer: true }
        Property { name: "dropAction"; type: "int" }
        Property { name: "source"; type: "QQuickItem"; isPointer: true }
        Property { name: "image"; type: "QUrl" }
        Property { name: "hotSpot"; type: "QPoint" }
        Property { name: "imageData"; type: "QImage" }
        Property { name: "dragging"; type: "bool"; isReadonly: true }
        Method { name: "start"; type: "int" }
    }
    Component {
        name: "AsemanEncrypter"
        prototype: "QObject"
        exports: ["AsemanQml.Base/Encrypter 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "key"; type: "string" }
        Method {
            name: "encrypt"
            type: "QByteArray"
            Parameter { name: "data"; type: "QByteArray" }
        }
        Method {
            name: "decrypt"
            type: "QByteArray"
            Parameter { name: "data"; type: "QByteArray" }
        }
    }
    Component {
        name: "AsemanFileDownloaderQueue"
        prototype: "QObject"
        exports: [
            "AsemanQml.Base/DownloaderQueue 2.0",
            "AsemanQml.Base/FileDownloaderQueue 2.0"
        ]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0, 0]
        Property { name: "capacity"; type: "int" }
        Property { name: "destination"; type: "string" }
        Signal {
            name: "finished"
            Parameter { name: "url"; type: "string" }
            Parameter { name: "fileName"; type: "string" }
        }
        Signal {
            name: "progressChanged"
            Parameter { name: "url"; type: "string" }
            Parameter { name: "fileName"; type: "string" }
            Parameter { name: "percent"; type: "double" }
        }
        Method {
            name: "download"
            Parameter { name: "url"; type: "string" }
            Parameter { name: "fileName"; type: "string" }
        }
    }
    Component {
        name: "AsemanFileDownloaderQueueItem"
        prototype: "QObject"
        exports: ["AsemanQml.Base/FileDownloaderQueueItem 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "source"; type: "string" }
        Property { name: "fileName"; type: "string" }
        Property { name: "percent"; type: "double"; isReadonly: true }
        Property { name: "downloaderQueue"; type: "AsemanFileDownloaderQueue"; isPointer: true }
        Property { name: "result"; type: "string"; isReadonly: true }
    }
    Component {
        name: "AsemanFileSystemModel"
        prototype: "AsemanAbstractListModel"
        exports: ["AsemanQml.Base/FileSystemModel 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "SortFlag"
            values: {
                "Name": 0,
                "Size": 1,
                "Date": 2
            }
        }
        Enum {
            name: "DataRole"
            values: {
                "FilePath": 256,
                "FileUrl": 257,
                "FileName": 258,
                "FileMime": 259,
                "FileSize": 260,
                "FileSuffix": 261,
                "FileBaseName": 262,
                "FileIsDir": 263,
                "FileModifiedDate": 264,
                "FileCreatedDate": 265
            }
        }
        Property { name: "showDirs"; type: "bool" }
        Property { name: "showDotAndDotDot"; type: "bool" }
        Property { name: "showDirsFirst"; type: "bool" }
        Property { name: "showFiles"; type: "bool" }
        Property { name: "showHidden"; type: "bool" }
        Property { name: "nameFilters"; type: "QStringList" }
        Property { name: "folder"; type: "string" }
        Property { name: "parentFolder"; type: "string"; isReadonly: true }
        Property { name: "sortField"; type: "int" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Signal { name: "listChanged" }
        Method { name: "refresh" }
    }
    Component {
        name: "AsemanHashObject"
        prototype: "QObject"
        exports: ["AsemanQml.Base/HashObject 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Method {
            name: "insert"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "insertMulti"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "remove"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "remove"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "key"
            type: "QVariant"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "keys"
            type: "QStringList"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method { name: "uniqueKeys"; type: "QStringList" }
        Method { name: "keys"; type: "QStringList" }
        Method {
            name: "value"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "values"
            type: "QVariantList"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "containt"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "containt"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "contains"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "contains"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method { name: "clear" }
        Method { name: "count"; type: "int" }
        Method { name: "toMap"; type: "QVariantMap" }
    }
    Component {
        name: "AsemanHostChecker"
        prototype: "QObject"
        exports: ["AsemanQml.Base/HostChecker 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "host"; type: "string" }
        Property { name: "port"; type: "int" }
        Property { name: "interval"; type: "int" }
        Property { name: "available"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "AsemanImageColorAnalizor"
        prototype: "QObject"
        exports: ["AsemanQml.Base/ImageColorAnalizor 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Method"
            values: {
                "Normal": 0,
                "MoreSaturation": 1
            }
        }
        Property { name: "source"; type: "QUrl" }
        Property { name: "color"; type: "QColor"; isReadonly: true }
        Property { name: "method"; type: "int" }
    }
    Component {
        name: "AsemanItemGrabber"
        prototype: "QObject"
        exports: ["AsemanQml.Base/ItemGrabber 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "item"; type: "QQuickItem"; isPointer: true }
        Property { name: "suffix"; type: "string" }
        Property { name: "fileName"; type: "string" }
        Signal {
            name: "saved"
            Parameter { name: "dest"; type: "string" }
        }
        Signal { name: "failed" }
        Method {
            name: "save"
            Parameter { name: "dest"; type: "string" }
            Parameter { name: "size"; type: "QSize" }
        }
    }
    Component {
        name: "AsemanListObject"
        prototype: "QObject"
        exports: ["AsemanQml.Base/ListObject 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "list"; type: "QVariantList" }
        Method {
            name: "removeAll"
            Parameter { name: "v"; type: "QVariant" }
        }
        Method {
            name: "removeOne"
            Parameter { name: "v"; type: "QVariant" }
        }
        Method {
            name: "removeAt"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "takeLast"; type: "QVariant" }
        Method { name: "takeFirst"; type: "QVariant" }
        Method {
            name: "takeAt"
            type: "QVariant"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "clear" }
        Method { name: "last"; type: "QVariant" }
        Method { name: "first"; type: "QVariant" }
        Method {
            name: "insert"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "v"; type: "QVariant" }
        }
        Method {
            name: "append"
            Parameter { name: "v"; type: "QVariant" }
        }
        Method {
            name: "prepend"
            Parameter { name: "v"; type: "QVariant" }
        }
        Method {
            name: "replace"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "v"; type: "QVariant" }
        }
        Method {
            name: "swap"
            Parameter { name: "idx0"; type: "int" }
            Parameter { name: "idx1"; type: "int" }
        }
        Method { name: "count"; type: "int" }
        Method { name: "isEmpty"; type: "bool" }
        Method {
            name: "at"
            type: "QVariant"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "v"; type: "QVariant" }
        }
        Method {
            name: "fromList"
            Parameter { name: "list"; type: "QVariantList" }
        }
        Method { name: "toList"; type: "QVariantList" }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "v"; type: "QVariant" }
        }
        Method { name: "sort" }
    }
    Component {
        name: "AsemanMapObject"
        prototype: "QObject"
        exports: ["AsemanQml.Base/MapObject 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Method {
            name: "insert"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "insertMulti"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "remove"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "remove"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "key"
            type: "QVariant"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "keys"
            type: "QStringList"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method { name: "uniqueKeys"; type: "QStringList" }
        Method { name: "keys"; type: "QStringList" }
        Method {
            name: "value"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "values"
            type: "QVariantList"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "containt"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "containt"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "contains"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "contains"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method { name: "clear" }
        Method { name: "count"; type: "int" }
        Method { name: "toMap"; type: "QVariantMap" }
    }
    Component {
        name: "AsemanMimeApps"
        prototype: "QObject"
        exports: ["AsemanQml.Base/MimeApps 2.0"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "openFiles"
            Parameter { name: "app"; type: "string" }
            Parameter { name: "files"; type: "QStringList" }
        }
        Method {
            name: "appsOfMime"
            type: "QStringList"
            Parameter { name: "mime"; type: "string" }
        }
        Method {
            name: "appsOfFile"
            type: "QStringList"
            Parameter { name: "file"; type: "string" }
        }
        Method {
            name: "appName"
            type: "string"
            Parameter { name: "app"; type: "string" }
        }
        Method {
            name: "appIcon"
            type: "string"
            Parameter { name: "app"; type: "string" }
        }
        Method {
            name: "appGenericName"
            type: "string"
            Parameter { name: "app"; type: "string" }
        }
        Method {
            name: "appComment"
            type: "string"
            Parameter { name: "app"; type: "string" }
        }
        Method {
            name: "appPath"
            type: "string"
            Parameter { name: "app"; type: "string" }
        }
        Method {
            name: "appCommand"
            type: "string"
            Parameter { name: "app"; type: "string" }
        }
        Method {
            name: "appMimes"
            type: "QStringList"
            Parameter { name: "app"; type: "string" }
        }
    }
    Component {
        name: "AsemanMimeData"
        prototype: "QObject"
        exports: ["AsemanQml.Base/MimeData 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "text"; type: "string" }
        Property { name: "html"; type: "string" }
        Property { name: "urls"; type: "QList<QUrl>" }
        Property { name: "dataMap"; type: "QVariantMap" }
        Property { name: "formats"; type: "QStringList"; isReadonly: true }
        Method { name: "fetchClipboard" }
        Method {
            name: "getDataAsString"
            type: "string"
            Parameter { name: "type"; type: "string" }
        }
    }
    Component {
        name: "AsemanMixedListModel"
        prototype: "AsemanAbstractListModel"
        exports: ["AsemanQml.Base/MixedListModel 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "models"; type: "QVariantList" }
    }
    Component {
        name: "AsemanMouseEventListener"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["AsemanQml.Base/MouseEventListener 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "mouseX"; type: "double"; isReadonly: true }
        Property { name: "mouseY"; type: "double"; isReadonly: true }
        Property { name: "mousePosition"; type: "QPointF"; isReadonly: true }
        Signal { name: "mousePressed" }
        Signal { name: "mouseReleased" }
        Method { name: "ignoreEvent" }
        Method { name: "acceptEvent" }
    }
    Component {
        name: "AsemanNetworkManager"
        prototype: "QObject"
        exports: ["AsemanQml.Base/NetworkManager 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "defaultNetworkIdentifier"; type: "string"; isReadonly: true }
        Property { name: "configurations"; type: "QVariantMap"; isReadonly: true }
        Property {
            name: "defaultNetwork"
            type: "AsemanNetworkManagerItem"
            isReadonly: true
            isPointer: true
        }
        Property { name: "interval"; type: "int" }
    }
    Component {
        name: "AsemanNetworkManagerItem"
        prototype: "QObject"
        exports: ["AsemanQml.Base/NetworkManagerItem 2.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "bearerType"; type: "int"; isReadonly: true }
        Property { name: "bearerTypeFamily"; type: "int"; isReadonly: true }
        Property { name: "bearerTypeName"; type: "string"; isReadonly: true }
        Property { name: "children"; type: "QList<AsemanNetworkManagerItem*>"; isReadonly: true }
        Property { name: "identifier"; type: "string"; isReadonly: true }
        Property { name: "isRoamingAvailable"; type: "bool"; isReadonly: true }
        Property { name: "isValid"; type: "bool"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "purpose"; type: "int"; isReadonly: true }
        Property { name: "state"; type: "int"; isReadonly: true }
        Property { name: "type"; type: "int"; isReadonly: true }
    }
    Component {
        name: "AsemanNetworkProxy"
        prototype: "QObject"
        exports: ["AsemanQml.Base/NetworkProxy 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ProxyType"
            values: {
                "DefaultProxy": 0,
                "Socks5Proxy": 1,
                "NoProxy": 2,
                "HttpProxy": 3,
                "HttpCachingProxy": 4,
                "FtpCachingProxy": 5
            }
        }
        Property { name: "type"; type: "int" }
        Property { name: "hostName"; type: "string" }
        Property { name: "port"; type: "ushort" }
        Property { name: "user"; type: "string" }
        Property { name: "password"; type: "string" }
    }
    Component {
        name: "AsemanNetworkSleepManager"
        prototype: "QObject"
        exports: ["AsemanQml.Base/NetworkSleepManager 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "host"; type: "string" }
        Property { name: "port"; type: "int" }
        Property { name: "interval"; type: "int" }
        Property { name: "networkManager"; type: "bool" }
        Property { name: "available"; type: "bool"; isReadonly: true }
        Signal { name: "wake" }
        Signal { name: "sleep" }
    }
    Component {
        name: "AsemanProcess"
        prototype: "QObject"
        exports: ["AsemanQml.Base/Process 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "arguments"; type: "QStringList" }
        Property { name: "command"; type: "string" }
        Property { name: "running"; type: "bool"; isReadonly: true }
        Method { name: "start" }
        Method { name: "terminate" }
    }
    Component {
        name: "AsemanQmlImage"
        defaultProperty: "data"
        prototype: "QQuickPaintedItem"
        exports: ["AsemanQml.Base/AsemanImage 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "FillMode"
            values: {
                "Stretch": 0,
                "PreserveAspectFit": 1,
                "PreserveAspectCrop": 2,
                "Tile": 3
            }
        }
        Property { name: "source"; type: "QUrl" }
        Property { name: "fillMode"; type: "int" }
        Property { name: "asynchronous"; type: "bool" }
        Property { name: "autoTransform"; type: "bool" }
        Property { name: "cache"; type: "bool" }
        Property { name: "horizontalAlignment"; type: "int" }
        Property { name: "verticalAlignment"; type: "int" }
        Property { name: "mipmap"; type: "bool" }
        Property { name: "mirror"; type: "bool" }
        Property { name: "paintedWidth"; type: "double"; isReadonly: true }
        Property { name: "paintedHeight"; type: "double"; isReadonly: true }
        Property { name: "progress"; type: "double"; isReadonly: true }
        Property { name: "smooth"; type: "bool" }
        Property { name: "sourceSize"; type: "QSize"; isReadonly: true }
        Signal { name: "paintedSizeChanged" }
        Method { name: "refresh" }
    }
    Component {
        name: "AsemanQmlSmartComponent"
        prototype: "QObject"
        exports: ["AsemanQml.Base/SmartComponentCore 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "source"; type: "QUrl" }
        Property { name: "status"; type: "int"; isReadonly: true }
        Property { name: "component"; type: "QQmlComponent"; isReadonly: true; isPointer: true }
        Property { name: "delayInterval"; type: "int" }
        Signal { name: "errorChanged" }
        Signal { name: "ready" }
    }
    Component {
        name: "AsemanQtLogger"
        prototype: "QObject"
        exports: ["AsemanQml.Base/Logger 2.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "path"; type: "string"; isReadonly: true }
        Method {
            name: "debug"
            Parameter { name: "var"; type: "QVariant" }
        }
        Method { name: "start" }
    }
    Component {
        name: "AsemanQuickItemImageGrabber"
        prototype: "QObject"
        exports: ["AsemanQml.Base/ItemImageGrabber 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "item"; type: "QQuickItem"; isPointer: true }
        Property { name: "image"; type: "QImage"; isReadonly: true }
        Property { name: "defaultImage"; type: "QUrl" }
        Method { name: "start" }
    }
    Component {
        name: "AsemanQuickObject"
        defaultProperty: "items"
        prototype: "QObject"
        exports: ["AsemanQml.Base/AsemanObject 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "items"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        name: "AsemanQuickViewWrapper"
        prototype: "QObject"
        exports: ["AsemanQml.Base/View 2.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "reverseScroll"; type: "bool" }
        Property { name: "statusBarHeight"; type: "double"; isReadonly: true }
        Property { name: "navigationBarHeight"; type: "double"; isReadonly: true }
        Property { name: "root"; type: "QObject"; isPointer: true }
        Property { name: "focusedText"; type: "QQuickItem"; isPointer: true }
        Property { name: "layoutDirection"; type: "int" }
        Property { name: "reverseLayout"; type: "bool"; isReadonly: true }
        Property { name: "defaultLayout"; type: "bool"; isReadonly: true }
        Property { name: "offlineStoragePath"; type: "string" }
        Property { name: "flickVelocity"; type: "double"; isReadonly: true }
        Property { name: "window"; type: "QWindow"; isReadonly: true; isPointer: true }
        Signal { name: "fullscreenChanged" }
        Signal { name: "backControllerChanged" }
        Signal { name: "fakeSignal" }
        Signal { name: "closeRequest" }
        Method { name: "discardFocusedText" }
        Method {
            name: "registerWindow"
            Parameter { name: "window"; type: "QQuickWindow"; isPointer: true }
        }
    }
    Component {
        name: "AsemanSettings"
        prototype: "QObject"
        exports: ["AsemanQml.Base/Settings 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "category"; type: "string" }
        Property { name: "source"; type: "string" }
        Signal { name: "valueChanged" }
        Method {
            name: "setValue"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "value"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "defaultValue"; type: "QVariant" }
        }
        Method {
            name: "value"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "remove"
            Parameter { name: "key"; type: "string" }
        }
        Method { name: "keys"; type: "QStringList" }
    }
    Component {
        name: "AsemanSystemInfo"
        prototype: "QObject"
        exports: ["AsemanQml.Base/SystemInfo 2.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "cpuCores"; type: "qulonglong"; isReadonly: true }
        Property { name: "cpuFreq"; type: "qulonglong"; isReadonly: true }
        Signal { name: "fakeSignal" }
        Method { name: "cpuCores"; type: "qulonglong" }
        Method { name: "cpuFreq"; type: "qulonglong" }
    }
    Component {
        name: "AsemanSystemTray"
        prototype: "QObject"
        exports: ["AsemanQml.Base/SystemTray 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ActivateReason"
            values: {
                "ActivateUnknown": 0,
                "ActivateContext": 1,
                "ActivateDoubleClick": 2,
                "ActivateTrigger": 3,
                "ActivateMiddleClick": 4
            }
        }
        Property { name: "visible"; type: "bool" }
        Property { name: "icon"; type: "QUrl" }
        Property { name: "badgeCount"; type: "int" }
        Property { name: "badgeFillColor"; type: "QColor" }
        Property { name: "badgeStrokeColor"; type: "QColor" }
        Property { name: "badgeTextColor"; type: "QColor" }
        Property { name: "menu"; type: "QStringList" }
        Signal {
            name: "activated"
            Parameter { name: "reason"; type: "int" }
        }
        Signal {
            name: "menuTriggered"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "AsemanTextTools"
        prototype: "QObject"
        exports: ["AsemanQml.Base/TextTools 2.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "htmlWidth"
            type: "double"
            Parameter { name: "html"; type: "string" }
        }
        Method {
            name: "directionOf"
            type: "Qt::LayoutDirection"
            Parameter { name: "str"; type: "string" }
        }
    }
    Component {
        name: "AsemanTitleBarColorGrabber"
        prototype: "QObject"
        exports: ["AsemanQml.Base/TitleBarColorGrabber 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "window"; type: "QWindow"; isPointer: true }
        Property { name: "autoRefresh"; type: "bool" }
        Property { name: "defaultColor"; type: "QColor" }
        Property { name: "color"; type: "QColor"; isReadonly: true }
        Method { name: "refresh" }
    }
    Component {
        name: "AsemanTools"
        prototype: "QObject"
        Method {
            name: "debug"
            Parameter { name: "var"; type: "QVariant" }
        }
        Method { name: "currentDate"; type: "QDateTime" }
        Method {
            name: "dateToMSec"
            type: "string"
            Parameter { name: "dt"; type: "QDateTime" }
        }
        Method {
            name: "mSecToDate"
            type: "QDateTime"
            Parameter { name: "ms"; type: "string" }
        }
        Method {
            name: "dateToSec"
            type: "qlonglong"
            Parameter { name: "dt"; type: "QDateTime" }
        }
        Method {
            name: "dateToString"
            type: "string"
            Parameter { name: "dt"; type: "QDateTime" }
            Parameter { name: "format"; type: "string" }
        }
        Method {
            name: "dateToString"
            type: "string"
            Parameter { name: "dt"; type: "QDateTime" }
        }
        Method {
            name: "dateAddDays"
            type: "QDate"
            Parameter { name: "date"; type: "QDate" }
            Parameter { name: "days"; type: "int" }
        }
        Method {
            name: "toStringList"
            type: "QStringList"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "toVariantMap"
            type: "QVariantMap"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "toVariantList"
            type: "QVariantList"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "byteArrayToString"
            type: "string"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "compress"
            type: "QByteArray"
            Parameter { name: "data"; type: "QByteArray" }
            Parameter { name: "level"; type: "int" }
        }
        Method {
            name: "compress"
            type: "QByteArray"
            Parameter { name: "data"; type: "QByteArray" }
        }
        Method {
            name: "uncompress"
            type: "QByteArray"
            Parameter { name: "data"; type: "QByteArray" }
        }
        Method {
            name: "bytesToVariant"
            type: "QVariant"
            Parameter { name: "data"; type: "QByteArray" }
        }
        Method {
            name: "variantToBytes"
            type: "QByteArray"
            Parameter { name: "var"; type: "QVariant" }
        }
        Method {
            name: "fileName"
            type: "string"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "fileSuffix"
            type: "string"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "fileMime"
            type: "string"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "fileParent"
            type: "string"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "readText"
            type: "string"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "writeText"
            type: "bool"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "fileExists"
            type: "bool"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "filesOf"
            type: "QStringList"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "imageSize"
            type: "QSize"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "writeFile"
            type: "bool"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "data"; type: "QVariant" }
            Parameter { name: "compress"; type: "bool" }
        }
        Method {
            name: "writeFile"
            type: "bool"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "data"; type: "QVariant" }
        }
        Method {
            name: "readFile"
            type: "QByteArray"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "uncompress"; type: "bool" }
        }
        Method {
            name: "readFile"
            type: "QByteArray"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "className"
            type: "string"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "stringLinks"
            type: "QStringList"
            Parameter { name: "str"; type: "string" }
        }
        Method {
            name: "stringToUrl"
            type: "QUrl"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "urlToLocalPath"
            type: "string"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method { name: "qtVersion"; type: "string" }
        Method { name: "aboutAseman"; type: "string" }
        Method {
            name: "deleteItemDelay"
            Parameter { name: "o"; type: "QObject"; isPointer: true }
            Parameter { name: "ms"; type: "int" }
        }
        Method {
            name: "colorHue"
            type: "double"
            Parameter { name: "clr"; type: "QColor" }
        }
        Method {
            name: "colorLightness"
            type: "double"
            Parameter { name: "clr"; type: "QColor" }
        }
        Method {
            name: "colorSaturation"
            type: "double"
            Parameter { name: "clr"; type: "QColor" }
        }
        Method {
            name: "mkDir"
            Parameter { name: "dir"; type: "string" }
        }
        Method {
            name: "colorHsl"
            type: "QVariantMap"
            Parameter { name: "clr"; type: "QColor" }
        }
        Method {
            name: "createVideoThumbnail"
            type: "bool"
            Parameter { name: "video"; type: "string" }
            Parameter { name: "output"; type: "string" }
            Parameter { name: "ffmpegPath"; type: "string" }
        }
        Method {
            name: "createVideoThumbnail"
            type: "bool"
            Parameter { name: "video"; type: "string" }
            Parameter { name: "output"; type: "string" }
        }
        Method {
            name: "translateNumbers"
            type: "string"
            Parameter { name: "input"; type: "string" }
        }
        Method {
            name: "trNums"
            type: "string"
            Parameter { name: "input"; type: "string" }
        }
        Method {
            name: "passToMd5"
            type: "string"
            Parameter { name: "pass"; type: "string" }
        }
        Method {
            name: "md5"
            type: "string"
            Parameter { name: "str"; type: "string" }
        }
        Method { name: "createUuid"; type: "string" }
        Method {
            name: "stringRemove"
            type: "string"
            Parameter { name: "str"; type: "string" }
            Parameter { name: "text"; type: "string" }
            Parameter { name: "regExp"; type: "bool" }
        }
        Method {
            name: "stringRemove"
            type: "string"
            Parameter { name: "str"; type: "string" }
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "htmlToPlaintText"
            type: "string"
            Parameter { name: "html"; type: "string" }
        }
        Method {
            name: "copyDirectory"
            Parameter { name: "src"; type: "string" }
            Parameter { name: "dst"; type: "string" }
        }
        Method {
            name: "copy"
            type: "bool"
            Parameter { name: "src"; type: "string" }
            Parameter { name: "dst"; type: "string" }
        }
        Method {
            name: "deleteFile"
            Parameter { name: "file"; type: "string" }
        }
        Method {
            name: "clearDirectory"
            Parameter { name: "dir"; type: "string" }
        }
        Method {
            name: "setProperty"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "property"; type: "string" }
            Parameter { name: "v"; type: "QVariant" }
        }
        Method {
            name: "property"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "property"; type: "string" }
        }
        Method {
            name: "directionOf"
            type: "Qt::LayoutDirection"
            Parameter { name: "str"; type: "string" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
            Parameter { name: "v1"; type: "QVariant" }
            Parameter { name: "v2"; type: "QVariant" }
            Parameter { name: "v3"; type: "QVariant" }
            Parameter { name: "v4"; type: "QVariant" }
            Parameter { name: "v5"; type: "QVariant" }
            Parameter { name: "v6"; type: "QVariant" }
            Parameter { name: "v7"; type: "QVariant" }
            Parameter { name: "v8"; type: "QVariant" }
            Parameter { name: "v9"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
            Parameter { name: "v1"; type: "QVariant" }
            Parameter { name: "v2"; type: "QVariant" }
            Parameter { name: "v3"; type: "QVariant" }
            Parameter { name: "v4"; type: "QVariant" }
            Parameter { name: "v5"; type: "QVariant" }
            Parameter { name: "v6"; type: "QVariant" }
            Parameter { name: "v7"; type: "QVariant" }
            Parameter { name: "v8"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
            Parameter { name: "v1"; type: "QVariant" }
            Parameter { name: "v2"; type: "QVariant" }
            Parameter { name: "v3"; type: "QVariant" }
            Parameter { name: "v4"; type: "QVariant" }
            Parameter { name: "v5"; type: "QVariant" }
            Parameter { name: "v6"; type: "QVariant" }
            Parameter { name: "v7"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
            Parameter { name: "v1"; type: "QVariant" }
            Parameter { name: "v2"; type: "QVariant" }
            Parameter { name: "v3"; type: "QVariant" }
            Parameter { name: "v4"; type: "QVariant" }
            Parameter { name: "v5"; type: "QVariant" }
            Parameter { name: "v6"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
            Parameter { name: "v1"; type: "QVariant" }
            Parameter { name: "v2"; type: "QVariant" }
            Parameter { name: "v3"; type: "QVariant" }
            Parameter { name: "v4"; type: "QVariant" }
            Parameter { name: "v5"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
            Parameter { name: "v1"; type: "QVariant" }
            Parameter { name: "v2"; type: "QVariant" }
            Parameter { name: "v3"; type: "QVariant" }
            Parameter { name: "v4"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
            Parameter { name: "v1"; type: "QVariant" }
            Parameter { name: "v2"; type: "QVariant" }
            Parameter { name: "v3"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
            Parameter { name: "v1"; type: "QVariant" }
            Parameter { name: "v2"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
            Parameter { name: "v1"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
        }
    }
    Component {
        name: "AsemanToolsItem"
        prototype: "AsemanTools"
        exports: ["AsemanQml.Base/Tools 2.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "variantToJson"
            type: "string"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "jsonToVariant"
            type: "QVariant"
            Parameter { name: "json"; type: "string" }
        }
        Method {
            name: "jsDelayCall"
            Parameter { name: "ms"; type: "int" }
            Parameter { name: "value"; type: "QJSValue" }
        }
        Method {
            name: "setInAppStoreProperty"
            Parameter { name: "store"; type: "QObject"; isPointer: true }
            Parameter { name: "propertyName"; type: "string" }
            Parameter { name: "value"; type: "string" }
        }
    }
    Component {
        name: "AsemanTranslationManager"
        prototype: "QObject"
        exports: ["AsemanQml.Base/TranslationManager 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "sourceDirectory"; type: "QUrl" }
        Property { name: "localeName"; type: "string" }
        Property { name: "fileName"; type: "string" }
        Property { name: "delimiters"; type: "string" }
        Property { name: "refresher"; type: "string"; isReadonly: true }
        Property { name: "textDirection"; type: "int"; isReadonly: true }
        Property { name: "translations"; type: "QVariantMap"; isReadonly: true }
        Signal { name: "refreshed" }
    }
    Component {
        name: "AsemanWindowDetails"
        prototype: "QObject"
        exports: ["AsemanQml.Base/WindowDetails 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "window"; type: "QWindow"; isPointer: true }
        Property { name: "screen"; type: "QScreen"; isReadonly: true; isPointer: true }
    }
    Component {
        name: "QScreen"
        prototype: "QObject"
        exports: ["AsemanQml.Base/Screen 2.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "manufacturer"; type: "string"; isReadonly: true }
        Property { name: "model"; type: "string"; isReadonly: true }
        Property { name: "serialNumber"; type: "string"; isReadonly: true }
        Property { name: "depth"; type: "int"; isReadonly: true }
        Property { name: "size"; type: "QSize"; isReadonly: true }
        Property { name: "availableSize"; type: "QSize"; isReadonly: true }
        Property { name: "virtualSize"; type: "QSize"; isReadonly: true }
        Property { name: "availableVirtualSize"; type: "QSize"; isReadonly: true }
        Property { name: "geometry"; type: "QRect"; isReadonly: true }
        Property { name: "availableGeometry"; type: "QRect"; isReadonly: true }
        Property { name: "virtualGeometry"; type: "QRect"; isReadonly: true }
        Property { name: "availableVirtualGeometry"; type: "QRect"; isReadonly: true }
        Property { name: "physicalSize"; type: "QSizeF"; isReadonly: true }
        Property { name: "physicalDotsPerInchX"; type: "double"; isReadonly: true }
        Property { name: "physicalDotsPerInchY"; type: "double"; isReadonly: true }
        Property { name: "physicalDotsPerInch"; type: "double"; isReadonly: true }
        Property { name: "logicalDotsPerInchX"; type: "double"; isReadonly: true }
        Property { name: "logicalDotsPerInchY"; type: "double"; isReadonly: true }
        Property { name: "logicalDotsPerInch"; type: "double"; isReadonly: true }
        Property { name: "devicePixelRatio"; type: "double"; isReadonly: true }
        Property { name: "primaryOrientation"; type: "Qt::ScreenOrientation"; isReadonly: true }
        Property { name: "orientation"; type: "Qt::ScreenOrientation"; isReadonly: true }
        Property { name: "nativeOrientation"; type: "Qt::ScreenOrientation"; isReadonly: true }
        Property { name: "refreshRate"; type: "double"; isReadonly: true }
        Signal {
            name: "geometryChanged"
            Parameter { name: "geometry"; type: "QRect" }
        }
        Signal {
            name: "availableGeometryChanged"
            Parameter { name: "geometry"; type: "QRect" }
        }
        Signal {
            name: "physicalSizeChanged"
            Parameter { name: "size"; type: "QSizeF" }
        }
        Signal {
            name: "physicalDotsPerInchChanged"
            Parameter { name: "dpi"; type: "double" }
        }
        Signal {
            name: "logicalDotsPerInchChanged"
            Parameter { name: "dpi"; type: "double" }
        }
        Signal {
            name: "virtualGeometryChanged"
            Parameter { name: "rect"; type: "QRect" }
        }
        Signal {
            name: "primaryOrientationChanged"
            Parameter { name: "orientation"; type: "Qt::ScreenOrientation" }
        }
        Signal {
            name: "orientationChanged"
            Parameter { name: "orientation"; type: "Qt::ScreenOrientation" }
        }
        Signal {
            name: "refreshRateChanged"
            Parameter { name: "refreshRate"; type: "double" }
        }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/AboutPage 2.0"
        exports: ["AsemanQml.Base/AboutPage 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "list"; type: "QVariant" }
        Property { name: "defaultColor"; type: "QColor" }
        Property { name: "framesColor"; type: "QColor" }
        Property { name: "textsColor"; type: "QColor" }
    }
    Component {
        prototype: "QObject"
        name: "AsemanQml.Base/AboutPageAseman 2.0"
        exports: ["AsemanQml.Base/AboutPageAseman 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "items"
        Property { name: "title"; type: "string" }
        Property { name: "icon"; type: "QUrl" }
        Property { name: "color"; type: "QColor" }
        Property { name: "delegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "items"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QObject"
        name: "AsemanQml.Base/AboutPageItem 2.0"
        exports: ["AsemanQml.Base/AboutPageItem 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "items"
        Property { name: "title"; type: "string" }
        Property { name: "icon"; type: "QUrl" }
        Property { name: "color"; type: "QColor" }
        Property { name: "delegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "items"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/AndroidListEffect 2.0"
        exports: ["AsemanQml.Base/AndroidListEffect 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "flickable"; type: "QQuickFlickable"; isPointer: true }
        Property { name: "minimumSensivityX"; type: "double" }
        Property { name: "minimumSensivityY"; type: "double" }
        Property { name: "ignoreDelayX"; type: "double" }
        Property { name: "ignoreDelayY"; type: "double" }
        Property { name: "topMargin"; type: "double" }
        Property { name: "bottomMargin"; type: "double" }
        Property { name: "mouseX"; type: "double"; isReadonly: true }
        Property { name: "mouseY"; type: "double"; isReadonly: true }
        Property { name: "mousePosition"; type: "QPointF"; isReadonly: true }
        Signal { name: "mousePressed" }
        Signal { name: "mouseReleased" }
        Method { name: "ignoreEvent" }
        Method { name: "acceptEvent" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/AnimationItem 2.0"
        exports: ["AsemanQml.Base/AnimationItem 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "anim"; type: "bool" }
        Property { name: "anim_time"; type: "int" }
        Property { name: "easing"; type: "QEasingCurve" }
        Signal { name: "animationFinished" }
        Method { name: "startAnimation"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickRectangle"
        name: "AsemanQml.Base/AsemanAbout 2.0"
        exports: ["AsemanQml.Base/AsemanAbout 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "darkBackground"; type: "bool"; isReadonly: true }
        Property { name: "textsColor"; type: "QColor" }
        Property { name: "highlightColor"; type: "QColor" }
        Property { name: "backButtonScale"; type: "double" }
        Property { name: "headerColor"; type: "QColor" }
    }
    Component {
        prototype: "QObject"
        name: "AsemanQml.Base/AsemanApplication 2.0"
        exports: ["AsemanQml.Base/AsemanApplication 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "items"
        Property { name: "source"; type: "QUrl" }
        Property { name: "appMain"; type: "QQuickWindow"; isReadonly: true; isPointer: true }
        Property { name: "proxy"; type: "AsemanNetworkProxy"; isPointer: true }
        Property { name: "applicationId"; type: "string" }
        Property { name: "isRunning"; type: "bool"; isReadonly: true }
        Property { name: "items"; type: "QObject"; isList: true; isReadonly: true }
        Signal {
            name: "messageReceived"
            Parameter { name: "msg"; type: "string" }
        }
        Method {
            name: "sendMessage"
            Parameter { name: "msg"; type: "string" }
        }
        Method {
            name: "requestPermissions"
            type: "QVariantMap"
            Parameter { name: "persmissions"; type: "QStringList" }
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Property { name: "homePath"; type: "string"; isReadonly: true }
        Property { name: "startPath"; type: "string"; isReadonly: true }
        Property { name: "appPath"; type: "string"; isReadonly: true }
        Property { name: "appFilePath"; type: "string"; isReadonly: true }
        Property { name: "logPath"; type: "string" }
        Property { name: "confsPath"; type: "string"; isReadonly: true }
        Property { name: "tempPath"; type: "string"; isReadonly: true }
        Property { name: "backupsPath"; type: "string"; isReadonly: true }
        Property { name: "cameraPath"; type: "string"; isReadonly: true }
        Property { name: "appType"; type: "int"; isReadonly: true }
        Property { name: "isDebug"; type: "bool"; isReadonly: true }
        Property { name: "globalFont"; type: "QFont" }
        Property { name: "applicationName"; type: "string" }
        Property { name: "applicationVersion"; type: "string" }
        Property { name: "organizationName"; type: "string" }
        Property { name: "organizationDomain"; type: "string" }
        Property { name: "applicationAbout"; type: "string" }
        Property { name: "qpaNoTextHandles"; type: "bool" }
        Property { name: "windowIcon"; type: "QUrl" }
        Property { name: "applicationState"; type: "int"; isReadonly: true }
        Property { name: "applicationDisplayName"; type: "string" }
        Property { name: "platformName"; type: "string"; isReadonly: true }
        Property { name: "quitOnLastWindowClosed"; type: "bool" }
        Signal { name: "fakeSignal" }
        Signal { name: "globalFontFamilyChanged" }
        Signal { name: "globalMonoFontFamilyChanged" }
        Signal { name: "languageUpdated" }
        Signal { name: "backRequest" }
        Signal { name: "clickedOnDock" }
        Signal { name: "lastWindowClosed" }
        Method { name: "refreshTranslations" }
        Method { name: "back" }
        Method { name: "exec"; type: "int" }
        Method {
            name: "exit"
            Parameter { name: "retcode"; type: "int" }
        }
        Method { name: "exit" }
        Method {
            name: "sleep"
            Parameter { name: "ms"; type: "qulonglong" }
        }
        Method {
            name: "setSetting"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "readSetting"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "defaultValue"; type: "QVariant" }
        }
        Method {
            name: "readSetting"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
        }
    }
    Component {
        prototype: "QQuickFlickable"
        name: "AsemanQml.Base/AsemanFlickable 2.0"
        exports: ["AsemanQml.Base/AsemanFlickable 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "flickableData"
        Property { name: "allTimeMode"; type: "bool" }
        Property { name: "tabBarRatio"; type: "double"; isReadonly: true }
        Property { name: "tabBarHeight"; type: "double" }
    }
    Component {
        prototype: "QObject"
        name: "AsemanQml.Base/AsemanFullWindow 2.0"
        exports: ["AsemanQml.Base/AsemanFullWindow 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentData"
        Property { name: "backgroundColor"; type: "QColor" }
        Property {
            name: "pageManager"
            type: "SlidePageManager_QMLTYPE_32"
            isReadonly: true
            isPointer: true
        }
        Property { name: "sidebar"; type: "SideMenu_QMLTYPE_28"; isReadonly: true; isPointer: true }
        Property {
            name: "headerButton"
            type: "HeaderMenuButton_QMLTYPE_39"
            isReadonly: true
            isPointer: true
        }
        Property { name: "backVisible"; type: "bool" }
        Property { name: "main"; type: "QQmlComponent"; isPointer: true }
        Property { name: "drawer"; type: "QQmlComponent"; isPointer: true }
        Property { name: "forceActiveBackButton"; type: "bool" }
        Property { name: "backController"; type: "bool" }
        Property { name: "try_close"; type: "bool" }
        Property { name: "portrait"; type: "bool"; isReadonly: true }
        Property { name: "masterPalette"; type: "QQuickSystemPalette"; isReadonly: true; isPointer: true }
        Property { name: "tooltip"; type: "Tooltip_QMLTYPE_46"; isReadonly: true; isPointer: true }
        Signal { name: "closeRequest" }
        Method { name: "tryClose"; type: "QVariant" }
        Method {
            name: "showTooltip"
            type: "QVariant"
            Parameter { name: "text"; type: "QVariant" }
        }
        Method {
            name: "showGlobalWait"
            type: "QVariant"
            Parameter { name: "text"; type: "QVariant" }
            Parameter { name: "blockBack"; type: "QVariant" }
        }
        Property { name: "background"; type: "QQuickItem"; isPointer: true }
        Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "contentData"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "activeFocusControl"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "header"; type: "QQuickItem"; isPointer: true }
        Property { name: "footer"; type: "QQuickItem"; isPointer: true }
        Property { name: "overlay"; type: "QQuickOverlay"; isReadonly: true; isPointer: true }
        Property { name: "font"; type: "QFont" }
        Property { name: "locale"; type: "QLocale" }
        Property { name: "visible"; type: "bool" }
        Property { name: "visibility"; type: "Visibility" }
        Property { name: "screen"; revision: 2; type: "QObject"; isPointer: true }
        Signal {
            name: "visibleChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "visibilityChanged"
            Parameter { name: "visibility"; type: "QWindow::Visibility" }
        }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "color"; type: "QColor" }
        Property {
            name: "activeFocusItem"
            revision: 1
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
        }
        Signal { name: "frameSwapped" }
        Signal {
            name: "openglContextCreated"
            revision: 2
            Parameter { name: "context"; type: "QOpenGLContext"; isPointer: true }
        }
        Signal { name: "sceneGraphInitialized" }
        Signal { name: "sceneGraphInvalidated" }
        Signal { name: "beforeSynchronizing" }
        Signal { name: "afterSynchronizing"; revision: 2 }
        Signal { name: "beforeRendering" }
        Signal { name: "afterRendering" }
        Signal { name: "afterAnimating"; revision: 2 }
        Signal { name: "sceneGraphAboutToStop"; revision: 2 }
        Signal {
            name: "closing"
            revision: 1
            Parameter { name: "close"; type: "QQuickCloseEvent"; isPointer: true }
        }
        Signal {
            name: "colorChanged"
            Parameter { type: "QColor" }
        }
        Signal {
            name: "sceneGraphError"
            revision: 2
            Parameter { name: "error"; type: "QQuickWindow::SceneGraphError" }
            Parameter { name: "message"; type: "string" }
        }
        Method { name: "update" }
        Method { name: "releaseResources" }
        Property { name: "title"; type: "string" }
        Property { name: "modality"; type: "Qt::WindowModality" }
        Property { name: "flags"; type: "Qt::WindowFlags" }
        Property { name: "x"; type: "int" }
        Property { name: "y"; type: "int" }
        Property { name: "width"; type: "int" }
        Property { name: "height"; type: "int" }
        Property { name: "minimumWidth"; type: "int" }
        Property { name: "minimumHeight"; type: "int" }
        Property { name: "maximumWidth"; type: "int" }
        Property { name: "maximumHeight"; type: "int" }
        Property { name: "active"; revision: 1; type: "bool"; isReadonly: true }
        Property { name: "contentOrientation"; type: "Qt::ScreenOrientation" }
        Property { name: "opacity"; revision: 1; type: "double" }
        Signal {
            name: "screenChanged"
            Parameter { name: "screen"; type: "QScreen"; isPointer: true }
        }
        Signal {
            name: "modalityChanged"
            Parameter { name: "modality"; type: "Qt::WindowModality" }
        }
        Signal {
            name: "windowStateChanged"
            Parameter { name: "windowState"; type: "Qt::WindowState" }
        }
        Signal {
            name: "windowTitleChanged"
            revision: 2
            Parameter { name: "title"; type: "string" }
        }
        Signal {
            name: "xChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "yChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "widthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "heightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "contentOrientationChanged"
            Parameter { name: "orientation"; type: "Qt::ScreenOrientation" }
        }
        Signal {
            name: "focusObjectChanged"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "opacityChanged"
            revision: 1
            Parameter { name: "opacity"; type: "double" }
        }
        Method { name: "requestActivate"; revision: 1 }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method { name: "show" }
        Method { name: "hide" }
        Method { name: "showMinimized" }
        Method { name: "showMaximized" }
        Method { name: "showFullScreen" }
        Method { name: "showNormal" }
        Method { name: "close"; type: "bool" }
        Method { name: "raise" }
        Method { name: "lower" }
        Method {
            name: "setTitle"
            Parameter { type: "string" }
        }
        Method {
            name: "setX"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setY"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setWidth"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setHeight"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setMinimumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMinimumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "setMaximumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMaximumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "alert"
            revision: 1
            Parameter { name: "msec"; type: "int" }
        }
        Method { name: "requestUpdate"; revision: 3 }
    }
    Component {
        prototype: "QQuickGridView"
        name: "AsemanQml.Base/AsemanGridView 2.0"
        exports: ["AsemanQml.Base/AsemanGridView 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "tabBarRatio"; type: "double"; isReadonly: true }
        Property { name: "tabBarHeight"; type: "double" }
    }
    Component {
        prototype: "QQuickListView"
        name: "AsemanQml.Base/AsemanListView 2.0"
        exports: ["AsemanQml.Base/AsemanListView 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "allTimeMode"; type: "bool" }
        Property { name: "tabBarRatio"; type: "double"; isReadonly: true }
        Property { name: "tabBarHeight"; type: "double" }
        Property { name: "tabBarMargin"; type: "double" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/AsemanLogo 2.0"
        exports: ["AsemanQml.Base/AsemanLogo 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "ratio"; type: "double" }
        Property { name: "dark"; type: "bool" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/AsemanPage 2.0"
        exports: ["AsemanQml.Base/AsemanPage 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "sceneData"
        Property { name: "landscape"; type: "bool"; isReadonly: true }
        Property { name: "footerItem"; type: "QQuickRectangle"; isReadonly: true; isPointer: true }
        Property { name: "sceneData"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "title"; type: "string" }
        Property { name: "header"; type: "QQuickItem"; isPointer: true }
        Property { name: "footer"; type: "QQuickItem"; isPointer: true }
        Property { name: "contentData"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "contentChildren"; type: "QQuickItem"; isList: true; isReadonly: true }
        Property { name: "contentWidth"; revision: 1; type: "double" }
        Property { name: "contentHeight"; revision: 1; type: "double" }
        Property { name: "font"; type: "QFont" }
        Property { name: "availableWidth"; type: "double"; isReadonly: true }
        Property { name: "availableHeight"; type: "double"; isReadonly: true }
        Property { name: "padding"; type: "double" }
        Property { name: "topPadding"; type: "double" }
        Property { name: "leftPadding"; type: "double" }
        Property { name: "rightPadding"; type: "double" }
        Property { name: "bottomPadding"; type: "double" }
        Property { name: "spacing"; type: "double" }
        Property { name: "locale"; type: "QLocale" }
        Property { name: "mirrored"; type: "bool"; isReadonly: true }
        Property { name: "focusPolicy"; type: "Qt::FocusPolicy" }
        Property { name: "focusReason"; type: "Qt::FocusReason" }
        Property { name: "visualFocus"; type: "bool"; isReadonly: true }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Property { name: "hoverEnabled"; type: "bool" }
        Property { name: "wheelEnabled"; type: "bool" }
        Property { name: "background"; type: "QQuickItem"; isPointer: true }
        Property { name: "contentItem"; type: "QQuickItem"; isPointer: true }
    }
    Component {
        prototype: "QQuickRectangle"
        name: "AsemanQml.Base/AsemanProductsList 2.0"
        exports: ["AsemanQml.Base/AsemanProductsList 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "source"; type: "QUrl" }
    }
    Component {
        prototype: "QObject"
        name: "AsemanQml.Base/AsemanWindow 2.0"
        exports: ["AsemanQml.Base/AsemanWindow 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentData"
        Property { name: "backController"; type: "bool" }
        Property { name: "try_close"; type: "bool" }
        Property { name: "portrait"; type: "bool"; isReadonly: true }
        Property { name: "masterPalette"; type: "QQuickSystemPalette"; isReadonly: true; isPointer: true }
        Property { name: "tooltip"; type: "Tooltip_QMLTYPE_46"; isReadonly: true; isPointer: true }
        Signal { name: "closeRequest" }
        Method { name: "tryClose"; type: "QVariant" }
        Method {
            name: "showTooltip"
            type: "QVariant"
            Parameter { name: "text"; type: "QVariant" }
        }
        Method {
            name: "showGlobalWait"
            type: "QVariant"
            Parameter { name: "text"; type: "QVariant" }
            Parameter { name: "blockBack"; type: "QVariant" }
        }
        Property { name: "background"; type: "QQuickItem"; isPointer: true }
        Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "contentData"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "activeFocusControl"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "header"; type: "QQuickItem"; isPointer: true }
        Property { name: "footer"; type: "QQuickItem"; isPointer: true }
        Property { name: "overlay"; type: "QQuickOverlay"; isReadonly: true; isPointer: true }
        Property { name: "font"; type: "QFont" }
        Property { name: "locale"; type: "QLocale" }
        Property { name: "visible"; type: "bool" }
        Property { name: "visibility"; type: "Visibility" }
        Property { name: "screen"; revision: 2; type: "QObject"; isPointer: true }
        Signal {
            name: "visibleChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "visibilityChanged"
            Parameter { name: "visibility"; type: "QWindow::Visibility" }
        }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "color"; type: "QColor" }
        Property {
            name: "activeFocusItem"
            revision: 1
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
        }
        Signal { name: "frameSwapped" }
        Signal {
            name: "openglContextCreated"
            revision: 2
            Parameter { name: "context"; type: "QOpenGLContext"; isPointer: true }
        }
        Signal { name: "sceneGraphInitialized" }
        Signal { name: "sceneGraphInvalidated" }
        Signal { name: "beforeSynchronizing" }
        Signal { name: "afterSynchronizing"; revision: 2 }
        Signal { name: "beforeRendering" }
        Signal { name: "afterRendering" }
        Signal { name: "afterAnimating"; revision: 2 }
        Signal { name: "sceneGraphAboutToStop"; revision: 2 }
        Signal {
            name: "closing"
            revision: 1
            Parameter { name: "close"; type: "QQuickCloseEvent"; isPointer: true }
        }
        Signal {
            name: "colorChanged"
            Parameter { type: "QColor" }
        }
        Signal {
            name: "sceneGraphError"
            revision: 2
            Parameter { name: "error"; type: "QQuickWindow::SceneGraphError" }
            Parameter { name: "message"; type: "string" }
        }
        Method { name: "update" }
        Method { name: "releaseResources" }
        Property { name: "title"; type: "string" }
        Property { name: "modality"; type: "Qt::WindowModality" }
        Property { name: "flags"; type: "Qt::WindowFlags" }
        Property { name: "x"; type: "int" }
        Property { name: "y"; type: "int" }
        Property { name: "width"; type: "int" }
        Property { name: "height"; type: "int" }
        Property { name: "minimumWidth"; type: "int" }
        Property { name: "minimumHeight"; type: "int" }
        Property { name: "maximumWidth"; type: "int" }
        Property { name: "maximumHeight"; type: "int" }
        Property { name: "active"; revision: 1; type: "bool"; isReadonly: true }
        Property { name: "contentOrientation"; type: "Qt::ScreenOrientation" }
        Property { name: "opacity"; revision: 1; type: "double" }
        Signal {
            name: "screenChanged"
            Parameter { name: "screen"; type: "QScreen"; isPointer: true }
        }
        Signal {
            name: "modalityChanged"
            Parameter { name: "modality"; type: "Qt::WindowModality" }
        }
        Signal {
            name: "windowStateChanged"
            Parameter { name: "windowState"; type: "Qt::WindowState" }
        }
        Signal {
            name: "windowTitleChanged"
            revision: 2
            Parameter { name: "title"; type: "string" }
        }
        Signal {
            name: "xChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "yChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "widthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "heightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "contentOrientationChanged"
            Parameter { name: "orientation"; type: "Qt::ScreenOrientation" }
        }
        Signal {
            name: "focusObjectChanged"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "opacityChanged"
            revision: 1
            Parameter { name: "opacity"; type: "double" }
        }
        Method { name: "requestActivate"; revision: 1 }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method { name: "show" }
        Method { name: "hide" }
        Method { name: "showMinimized" }
        Method { name: "showMaximized" }
        Method { name: "showFullScreen" }
        Method { name: "showNormal" }
        Method { name: "close"; type: "bool" }
        Method { name: "raise" }
        Method { name: "lower" }
        Method {
            name: "setTitle"
            Parameter { type: "string" }
        }
        Method {
            name: "setX"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setY"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setWidth"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setHeight"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setMinimumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMinimumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "setMaximumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMaximumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "alert"
            revision: 1
            Parameter { name: "msec"; type: "int" }
        }
        Method { name: "requestUpdate"; revision: 3 }
    }
    Component {
        prototype: "QObject"
        name: "AsemanQml.Base/BackAction 2.0"
        exports: ["AsemanQml.Base/BackAction 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "items"
        Property { name: "active"; type: "bool" }
        Property { name: "callback"; type: "QVariant" }
        Property { name: "items"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/BottomPanel 2.0"
        exports: ["AsemanQml.Base/BottomPanel 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "item"; type: "QVariant" }
        Property { name: "destroyOnHide"; type: "bool" }
        Method { name: "hide"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickRectangle"
        name: "AsemanQml.Base/Button 2.0"
        exports: ["AsemanQml.Base/Button 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "iconCenter"; type: "bool" }
        Property { name: "press"; type: "bool" }
        Property { name: "enter"; type: "bool" }
        Property { name: "triggeredOnHover"; type: "bool" }
        Property { name: "highlightColor"; type: "QColor" }
        Property { name: "normalColor"; type: "string" }
        Property { name: "hoverColor"; type: "string" }
        Property { name: "textMargin"; type: "double" }
        Property { name: "tooltipColor"; type: "QColor" }
        Property { name: "tooltipTextColor"; type: "QColor" }
        Property { name: "tooltipFont"; type: "QFont" }
        Property { name: "tooltipText"; type: "string" }
        Property { name: "tooltipPosition"; type: "int" }
        Property { name: "text"; type: "string" }
        Property { name: "icon"; type: "QUrl" }
        Property { name: "fontSize"; type: "int" }
        Property { name: "textFont"; type: "QFont" }
        Property { name: "hoverEnabled"; type: "bool" }
        Property { name: "containsMouse"; type: "bool"; isReadonly: true }
        Property { name: "iconHeight"; type: "double" }
        Property { name: "textColor"; type: "QColor" }
        Property { name: "rowWidth"; type: "double" }
        Property { name: "cursorShape"; type: "int" }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/CachedImage 2.0"
        exports: ["AsemanQml.Base/CachedImage 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "cachedSource"; type: "string"; isReadonly: true }
        Property { name: "fileName"; type: "string" }
        Property { name: "radius"; type: "double" }
        Property { name: "source"; type: "string" }
        Property { name: "percent"; type: "double"; isReadonly: true }
        Property { name: "fillMode"; type: "int" }
        Property { name: "asynchronous"; type: "bool" }
        Property { name: "cache"; type: "bool" }
        Property { name: "horizontalAlignment"; type: "int" }
        Property { name: "mirror"; type: "bool" }
        Property { name: "paintedHeight"; type: "double"; isReadonly: true }
        Property { name: "paintedWidth"; type: "double"; isReadonly: true }
        Property { name: "progress"; type: "double"; isReadonly: true }
        Property { name: "smooth"; type: "bool" }
        Property { name: "sourceSize"; type: "QSize" }
        Property { name: "status"; type: "int"; isReadonly: true }
        Property { name: "verticalAlignment"; type: "int" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/CircularProgressBar 2.0"
        exports: ["AsemanQml.Base/CircularProgressBar 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "lineWidth"; type: "double" }
        Property { name: "progress"; type: "double" }
        Property { name: "color"; type: "QColor" }
        Property { name: "running"; type: "bool" }
        Property { name: "progressText"; type: "bool" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/ColorfullListView 2.0"
        exports: ["AsemanQml.Base/ColorfullListView 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "titleBarDefaultColor"; type: "QColor" }
        Property { name: "titleBarDefaultTextColor"; type: "QColor" }
        Property { name: "headersHeight"; type: "double" }
        Property { name: "topMargin"; type: "double" }
        Property { name: "bottomMargin"; type: "double" }
        Property { name: "headerColorDomain"; type: "double" }
        Property { name: "headerColorHeight"; type: "double" }
        Property { name: "delegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "header"; type: "QQmlComponent"; isPointer: true }
        Property { name: "customHeader"; type: "QQmlComponent"; isPointer: true }
        Property { name: "titleBarHeight"; type: "double" }
        Property { name: "titleBarFont"; type: "QFont" }
        Property { name: "titleBarColor"; type: "QColor" }
        Property { name: "verticalVelocity"; type: "double"; isReadonly: true }
        Property { name: "horizontalVelocity"; type: "double"; isReadonly: true }
        Property { name: "contentY"; type: "double" }
        Property { name: "originY"; type: "double"; isReadonly: true }
        Property { name: "model"; type: "QVariant" }
        Property { name: "footer"; type: "QQmlComponent"; isPointer: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "atBegin"; type: "bool"; isReadonly: true }
        Property { name: "atEnd"; type: "bool"; isReadonly: true }
        Property { name: "listScale"; type: "double" }
        Property { name: "listTransformOrigin"; type: "int" }
        Method { name: "positionViewAtBeginning"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickRectangle"
        name: "AsemanQml.Base/CradleBits 2.0"
        exports: ["AsemanQml.Base/CradleBits 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "space"; type: "double" }
        Property { name: "x_pad"; type: "double" }
        Property { name: "index"; type: "int" }
        Method { name: "poke"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/CradleIndicator 2.0"
        exports: ["AsemanQml.Base/CradleIndicator 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "count"; type: "double" }
    }
    Component {
        prototype: "QObject"
        name: "AsemanQml.Base/CrashController 2.0"
        exports: ["AsemanQml.Base/CrashController 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "items"
        Property { name: "logLockFile"; type: "string" }
        Signal { name: "crashed" }
        Signal { name: "safe" }
        Method { name: "stopMonitoring"; type: "QVariant" }
        Method { name: "startMonitoring"; type: "QVariant" }
        Method { name: "unlock"; type: "QVariant" }
        Method { name: "checkCrash"; type: "QVariant" }
        Property { name: "items"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QQuickMouseArea"
        name: "AsemanQml.Base/CursorShapeArea 2.0"
        exports: ["AsemanQml.Base/CursorShapeArea 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickRectangle"
        name: "AsemanQml.Base/DateTimeChooser 2.0"
        exports: ["AsemanQml.Base/DateTimeChooser 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "textsColor"; type: "QColor" }
        Property { name: "dateVisible"; type: "bool" }
        Property { name: "timeVisible"; type: "bool" }
        Property { name: "calendarType"; type: "int" }
        Property { name: "date"; type: "QDateTime" }
        Method { name: "getDate"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/Dialog 2.0"
        exports: ["AsemanQml.Base/Dialog 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "color"; type: "QColor" }
        Property { name: "blockBack"; type: "bool" }
        Property { name: "autoDestroy"; type: "bool" }
        Property { name: "buttons"; type: "QVariant" }
        Property { name: "margins"; type: "double" }
        Property { name: "opened"; type: "bool" }
        Property { name: "title"; type: "string" }
        Property { name: "textColor"; type: "QColor" }
        Property { name: "font"; type: "QFont" }
        Property { name: "delegate"; type: "QQmlComponent"; isPointer: true }
        Signal {
            name: "buttonClicked"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "open"; type: "QVariant" }
        Method { name: "close"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/Drawer 2.0"
        exports: ["AsemanQml.Base/Drawer 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "delegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "item"; type: "QVariant" }
        Property { name: "handleWidth"; type: "double" }
        Property { name: "percent"; type: "double"; isReadonly: true }
        Property { name: "layoutDirection"; type: "int" }
        Property { name: "showed"; type: "bool"; isReadonly: true }
        Property { name: "menuWidth"; type: "double" }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Method { name: "discard"; type: "QVariant" }
        Method { name: "show"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickGridView"
        name: "AsemanQml.Base/FileSystemView 2.0"
        exports: ["AsemanQml.Base/FileSystemView 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "itemsLabelColor"; type: "QColor" }
        Property { name: "gridWidth"; type: "double" }
        Property { name: "root"; type: "string" }
        Property { name: "filters"; type: "QStringList" }
        Property { name: "showDotAndDotDot"; type: "bool" }
        Signal {
            name: "clickedOnFile"
            Parameter { name: "fileUrl"; type: "QVariant" }
        }
        Method { name: "back"; type: "QVariant" }
        Property { name: "tabBarRatio"; type: "double"; isReadonly: true }
        Property { name: "tabBarHeight"; type: "double" }
    }
    Component {
        prototype: "QQuickRectangle"
        name: "AsemanQml.Base/Header 2.0"
        exports: ["AsemanQml.Base/Header 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "light"; type: "bool" }
        Property { name: "backButton"; type: "bool" }
        Property { name: "backScale"; type: "double" }
        Property { name: "statusBar"; type: "bool" }
        Property { name: "centerText"; type: "bool" }
        Property { name: "layoutDirection"; type: "int" }
        Property { name: "defaultHeight"; type: "double"; isReadonly: true }
        Property { name: "text"; type: "string" }
        Property { name: "titleFont"; type: "QFont" }
        Property { name: "titleFontSize"; type: "int" }
        Property { name: "backButtonText"; type: "string" }
        Property { name: "shadow"; type: "bool" }
        Property { name: "shadowOpacity"; type: "double" }
        Signal { name: "beginBack" }
        Method { name: "initTranslations"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/HeaderMenuButton 2.0"
        exports: ["AsemanQml.Base/HeaderMenuButton 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "color"; type: "QColor" }
        Property { name: "buttonColor"; type: "QColor" }
        Property { name: "ratio"; type: "double" }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/Helper 2.0"
        exports: ["AsemanQml.Base/Helper 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "borderPadding"; type: "double" }
        Property { name: "currentIndex"; type: "int" }
        Property {
            name: "currentItem"
            type: "HelperPoint_QMLTYPE_109"
            isReadonly: true
            isPointer: true
        }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "ratio"; type: "double"; isReadonly: true }
        Property { name: "duration"; type: "int" }
        Signal { name: "finished" }
        Method { name: "next"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/HelperPoint 2.0"
        exports: ["AsemanQml.Base/HelperPoint 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "title"; type: "string" }
        Property { name: "description"; type: "string" }
        Property { name: "icon"; type: "string" }
        Property { name: "color"; type: "QColor" }
        Property { name: "titleColor"; type: "QColor" }
        Property { name: "descriptionColor"; type: "QColor" }
        Property { name: "iconColor"; type: "QColor" }
        Property { name: "titleFont"; type: "QFont" }
        Property { name: "descriptionFont"; type: "QFont" }
        Property { name: "iconFont"; type: "QFont" }
        Property { name: "buttonText"; type: "string" }
        Property { name: "classId"; type: "string"; isReadonly: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/Indicator 2.0"
        exports: ["AsemanQml.Base/Indicator 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "light"; type: "bool" }
        Property { name: "modern"; type: "bool" }
        Property { name: "indicatorSize"; type: "double" }
        Property { name: "source"; type: "string" }
        Property { name: "running"; type: "bool" }
        Method { name: "start"; type: "QVariant" }
        Method { name: "stop"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/ItemBackable 2.0"
        exports: ["AsemanQml.Base/ItemBackable 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "layoutDirection"; type: "int" }
        Property { name: "closeRatio"; type: "double"; isReadonly: true }
        Property { name: "opened"; type: "bool"; isReadonly: true }
        Property { name: "animationDuration"; type: "int" }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "handlerWidth"; type: "double" }
        Property { name: "active"; type: "bool" }
        Signal { name: "closed" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/MaterialDesignButton 2.0"
        exports: ["AsemanQml.Base/MaterialDesignButton 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "hideState"; type: "bool" }
        Property { name: "opened"; type: "bool" }
        Property { name: "layoutDirection"; type: "int" }
        Property { name: "hasMenu"; type: "bool" }
        Property { name: "list"; type: "QVariant" }
        Property { name: "rotateCount"; type: "int" }
        Property { name: "disable"; type: "bool" }
        Property { name: "flickable"; type: "QQuickFlickable"; isPointer: true }
        Property { name: "icon"; type: "QUrl" }
        Property { name: "color"; type: "QColor" }
        Property { name: "background"; type: "QColor" }
        Signal { name: "clicked" }
        Method { name: "hide"; type: "QVariant" }
        Method { name: "show"; type: "QVariant" }
        Method { name: "close"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/MaterialFrame 2.0"
        exports: ["AsemanQml.Base/MaterialFrame 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "color"; type: "QColor" }
        Property { name: "radius"; type: "double" }
        Property { name: "shadowColor"; type: "QColor" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/MenuController 2.0"
        exports: ["AsemanQml.Base/MenuController 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "ratio"; type: "double" }
        Property { name: "source"; type: "QVariant" }
        Property { name: "layoutDirection"; type: "int" }
        Property { name: "handleWidth"; type: "double" }
        Property { name: "component"; type: "QQmlComponent"; isPointer: true }
        Property { name: "menuWidth"; type: "double" }
        Property { name: "isVisible"; type: "bool" }
        Property { name: "menuTopMargin"; type: "double" }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "animating"; type: "bool" }
        Method { name: "refreshSource"; type: "QVariant" }
        Method { name: "refresh"; type: "QVariant" }
        Method { name: "close"; type: "QVariant" }
        Method { name: "show"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/MenuIcon 2.0"
        exports: ["AsemanQml.Base/MenuIcon 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "color"; type: "QColor" }
        Property { name: "ratio"; type: "double" }
        Property { name: "layoutDirection"; type: "int" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/MessageDialog 2.0"
        exports: ["AsemanQml.Base/MessageDialog 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "frameItem"; type: "QVariant" }
        Method {
            name: "show"
            type: "QVariant"
            Parameter { name: "component"; type: "QVariant" }
            Parameter { name: "args"; type: "QVariant" }
        }
        Method { name: "hide"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickColumn"
        name: "AsemanQml.Base/MessageDialogOkCancelWarning 2.0"
        exports: ["AsemanQml.Base/MessageDialogOkCancelWarning 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "message"; type: "string" }
        Property { name: "okText"; type: "string" }
        Signal { name: "canceled" }
        Signal { name: "ok" }
    }
    Component {
        prototype: "QQuickMouseArea"
        name: "AsemanQml.Base/NormalWheelScroll 2.0"
        exports: ["AsemanQml.Base/NormalWheelScroll 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "flick"; type: "QQuickFlickable"; isPointer: true }
        Property { name: "animated"; type: "bool" }
        Property { name: "reverse"; type: "bool" }
        Property { name: "naturalScroll"; type: "bool" }
        Property { name: "endContentY"; type: "double" }
    }
    Component {
        prototype: "QQuickMouseArea"
        name: "AsemanQml.Base/NullMouseArea 2.0"
        exports: ["AsemanQml.Base/NullMouseArea 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/OSXTitleButtons 2.0"
        exports: ["AsemanQml.Base/OSXTitleButtons 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "closeButton"; type: "bool" }
        Property { name: "minimizeButton"; type: "bool" }
        Property { name: "fullscreenButton"; type: "bool" }
        Property { name: "fullscreened"; type: "bool" }
        Property { name: "hovered"; type: "bool" }
    }
    Component {
        prototype: "QQuickRectangle"
        name: "AsemanQml.Base/PasteButton 2.0"
        exports: ["AsemanQml.Base/PasteButton 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "textItem"; type: "QVariant" }
        Property { name: "textRect"; type: "QRectF" }
        Method { name: "initTranslations"; type: "QVariant" }
        Property { name: "iconCenter"; type: "bool" }
        Property { name: "press"; type: "bool" }
        Property { name: "enter"; type: "bool" }
        Property { name: "triggeredOnHover"; type: "bool" }
        Property { name: "highlightColor"; type: "QColor" }
        Property { name: "normalColor"; type: "string" }
        Property { name: "hoverColor"; type: "string" }
        Property { name: "textMargin"; type: "double" }
        Property { name: "tooltipColor"; type: "QColor" }
        Property { name: "tooltipTextColor"; type: "QColor" }
        Property { name: "tooltipFont"; type: "QFont" }
        Property { name: "tooltipText"; type: "string" }
        Property { name: "tooltipPosition"; type: "int" }
        Property { name: "text"; type: "string" }
        Property { name: "icon"; type: "QUrl" }
        Property { name: "fontSize"; type: "int" }
        Property { name: "textFont"; type: "QFont" }
        Property { name: "hoverEnabled"; type: "bool" }
        Property { name: "containsMouse"; type: "bool"; isReadonly: true }
        Property { name: "iconHeight"; type: "double" }
        Property { name: "textColor"; type: "QColor" }
        Property { name: "rowWidth"; type: "double" }
        Property { name: "cursorShape"; type: "int" }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/PhysicalScrollBar 2.0"
        exports: ["AsemanQml.Base/PhysicalScrollBar 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "scrollArea"; type: "QQuickFlickable"; isPointer: true }
        Property { name: "orientation"; type: "int" }
        Property { name: "reverse"; type: "bool" }
        Property { name: "color"; type: "QColor" }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Method { name: "position"; type: "QVariant" }
        Method { name: "size"; type: "QVariant" }
    }
    Component {
        prototype: "QObject"
        name: "AsemanQml.Base/PointMapListener 2.0"
        exports: ["AsemanQml.Base/PointMapListener 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "items"
        Property { name: "source"; type: "QQuickItem"; isPointer: true }
        Property { name: "dest"; type: "QQuickItem"; isPointer: true }
        Property { name: "x"; type: "double" }
        Property { name: "y"; type: "double" }
        Property { name: "result"; type: "QPointF"; isReadonly: true }
        Property { name: "items"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/PointingDialog 2.0"
        exports: ["AsemanQml.Base/PointingDialog 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "item"; type: "QVariant" }
        Property { name: "margin"; type: "double" }
        Property { name: "hoverToClose"; type: "bool" }
        Property { name: "extraX"; type: "double" }
        Property { name: "extraY"; type: "double" }
        Property { name: "pointerLeftMargin"; type: "double" }
        Property { name: "containsMouse"; type: "bool"; isReadonly: true }
        Method { name: "refresh"; type: "QVariant" }
        Method {
            name: "pointingTo"
            type: "QVariant"
            Parameter { name: "x"; type: "QVariant" }
            Parameter { name: "y"; type: "QVariant" }
            Parameter { name: "width"; type: "QVariant" }
            Parameter { name: "height"; type: "QVariant" }
        }
        Method { name: "hide"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickRectangle"
        name: "AsemanQml.Base/ProgressBar 2.0"
        exports: ["AsemanQml.Base/ProgressBar 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "percent"; type: "double" }
        Property { name: "topColor"; type: "QColor" }
        Method {
            name: "setValue"
            type: "QVariant"
            Parameter { name: "p"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QQuickRectangle"
        name: "AsemanQml.Base/QueueList 2.0"
        exports: ["AsemanQml.Base/QueueList 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "currentIndex"; type: "int" }
        Property { name: "dscale"; type: "double" }
        Property { name: "components"; type: "QVariantList" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Method { name: "refresh"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/RollerDialog 2.0"
        exports: ["AsemanQml.Base/RollerDialog 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Method {
            name: "show"
            type: "QVariant"
            Parameter { name: "y1"; type: "QVariant" }
            Parameter { name: "y2"; type: "QVariant" }
            Parameter { name: "item"; type: "QVariant" }
        }
        Method { name: "hide"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/RoundedImage 2.0"
        exports: ["AsemanQml.Base/RoundedImage 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "radius"; type: "double" }
        Property { name: "asynchronous"; type: "bool" }
        Property { name: "cache"; type: "bool" }
        Property { name: "fillMode"; type: "int" }
        Property { name: "horizontalAlignment"; type: "int" }
        Property { name: "mirror"; type: "bool" }
        Property { name: "paintedHeight"; type: "double"; isReadonly: true }
        Property { name: "paintedWidth"; type: "double"; isReadonly: true }
        Property { name: "progress"; type: "double"; isReadonly: true }
        Property { name: "smooth"; type: "bool" }
        Property { name: "source"; type: "QUrl" }
        Property { name: "sourceSize"; type: "QSize" }
        Property { name: "status"; type: "int"; isReadonly: true }
        Property { name: "verticalAlignment"; type: "int" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/ScrollBar 2.0"
        exports: ["AsemanQml.Base/ScrollBar 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "scrollArea"; type: "QVariant" }
        Property { name: "orientation"; type: "QVariant" }
        Property { name: "forceVisible"; type: "bool" }
        Property { name: "color"; type: "QColor" }
        Method { name: "position"; type: "QVariant" }
        Method { name: "size"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/SearchBar 2.0"
        exports: ["AsemanQml.Base/SearchBar 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "show"; type: "bool" }
        Property { name: "pointX"; type: "double" }
        Property { name: "pointY"; type: "double" }
        Property { name: "ratio"; type: "double" }
        Property { name: "background"; type: "QColor" }
        Property { name: "styleAndroid"; type: "int"; isReadonly: true }
        Property { name: "styleIOS"; type: "int"; isReadonly: true }
        Property { name: "styleType"; type: "int" }
        Property { name: "text"; type: "string" }
        Property { name: "font"; type: "QFont" }
        Property { name: "color"; type: "QColor" }
        Property { name: "placeholder"; type: "string" }
        Property { name: "inputMethodHints"; type: "int" }
        Property { name: "validator"; type: "QValidator"; isPointer: true }
        Property { name: "verticalAlignment"; type: "int" }
        Property { name: "horizontalAlignment"; type: "int" }
        Property { name: "selectionColor"; type: "QColor" }
        Property { name: "selectionTextColor"; type: "QColor" }
        Property { name: "cursorParent"; type: "QQuickItem"; isPointer: true }
        Method { name: "open"; type: "QVariant" }
        Method { name: "close"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickRectangle"
        name: "AsemanQml.Base/SelectableList 2.0"
        exports: ["AsemanQml.Base/SelectableList 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "items"; type: "QVariant" }
        Property { name: "textsColor"; type: "QColor" }
        Property { name: "splitersColor"; type: "QColor" }
        Property { name: "itemsHeight"; type: "double" }
        Property { name: "nameMethodObject"; type: "QVariant" }
        Property { name: "nameMethodFunction"; type: "string" }
        Property { name: "debugMode"; type: "bool" }
        Property { name: "currentIndex"; type: "int" }
        Method {
            name: "positionViewAtIndex"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
            Parameter { name: "force"; type: "QVariant" }
        }
        Method {
            name: "itemName"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/ShadowRectangle 2.0"
        exports: ["AsemanQml.Base/ShadowRectangle 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "shadowSize"; type: "double" }
        Property { name: "color"; type: "QColor" }
        Property { name: "radius"; type: "double" }
        Property { name: "border"; type: "QQuickPen"; isReadonly: true; isPointer: true }
        Property { name: "shadowOpacity"; type: "double" }
        Property { name: "shadowRadius"; type: "double" }
        Property { name: "visibleShadow"; type: "bool" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/ShareDialog 2.0"
        exports: ["AsemanQml.Base/ShareDialog 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "started"; type: "bool" }
        Property { name: "sources"; type: "QVariant" }
        Method { name: "hide"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/SideMenu 2.0"
        exports: ["AsemanQml.Base/SideMenu 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "menuTypeModern"; type: "int"; isReadonly: true }
        Property { name: "menuTypeMaterial"; type: "int"; isReadonly: true }
        Property { name: "menuType"; type: "int" }
        Property { name: "delegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "source"; type: "QQuickItem"; isPointer: true }
        Property { name: "menuItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "handleWidth"; type: "double" }
        Property { name: "menuWidth"; type: "double" }
        Property { name: "showed"; type: "bool"; isReadonly: true }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "percent"; type: "double"; isReadonly: true }
        Property { name: "layoutDirection"; type: "int" }
        Method { name: "discard"; type: "QVariant" }
        Method { name: "show"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/SlidePageManager 2.0"
        exports: ["AsemanQml.Base/SlidePageManager 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "mainComponent"; type: "QQmlComponent"; isPointer: true }
        Property { name: "currentItem"; type: "QVariant"; isReadonly: true }
        Property { name: "animationDuration"; type: "int" }
        Property { name: "easingType"; type: "int" }
        Property { name: "gestureBackable"; type: "bool" }
        Property { name: "layoutDirection"; type: "int" }
        Property { name: "direction"; type: "int" }
        Property { name: "mainItem"; type: "QVariant" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Method {
            name: "append"
            type: "QVariant"
            Parameter { name: "component"; type: "QVariant" }
            Parameter { name: "properties"; type: "QVariant" }
        }
        Method { name: "closeLast"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/Slider 2.0"
        exports: ["AsemanQml.Base/Slider 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "maximum"; type: "double" }
        Property { name: "value"; type: "double" }
        Property { name: "backColor"; type: "QColor" }
        Property { name: "backRadius"; type: "double" }
        Property { name: "backBorder"; type: "QQuickPen"; isReadonly: true; isPointer: true }
        Property { name: "backHeight"; type: "double" }
        Property { name: "seekerColor"; type: "QColor" }
        Property { name: "seekerBorder"; type: "QQuickPen"; isReadonly: true; isPointer: true }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
    }
    Component {
        prototype: "QObject"
        name: "AsemanQml.Base/SmartComponent 2.0"
        exports: ["AsemanQml.Base/SmartComponent 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        Method { name: "createLocalComponent"; type: "QVariant" }
        Property { name: "source"; type: "QUrl" }
        Property { name: "status"; type: "int"; isReadonly: true }
        Property { name: "component"; type: "QQmlComponent"; isReadonly: true; isPointer: true }
        Property { name: "delayInterval"; type: "int" }
        Signal { name: "errorChanged" }
        Signal { name: "ready" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/SubMessage 2.0"
        exports: ["AsemanQml.Base/SubMessage 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "item"; type: "QVariant" }
        Property { name: "source"; type: "QVariant" }
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "blurBack"; type: "bool" }
        Method { name: "hide"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/TabBar 2.0"
        exports: ["AsemanQml.Base/TabBar 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "minimumWidth"; type: "double" }
        Property { name: "highlightColor"; type: "QColor" }
        Property { name: "textColor"; type: "QColor" }
        Property { name: "fontSize"; type: "double" }
        Property { name: "fontFamily"; type: "string" }
        Property { name: "displayRole"; type: "string" }
        Property { name: "color"; type: "QColor" }
        Property { name: "model"; type: "QVariant" }
        Property { name: "currentIndex"; type: "int" }
        Property { name: "layoutDirection"; type: "int" }
        Signal {
            name: "clicked"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/TabView 2.0"
        exports: ["AsemanQml.Base/TabView 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "minimumTabSize"; type: "double" }
        Property { name: "maximumTabSize"; type: "double" }
        Property { name: "tabsHeight"; type: "double" }
        Property { name: "model"; type: "QVariant" }
        Property { name: "currentIndex"; type: "int" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/TextCursorArea 2.0"
        exports: ["AsemanQml.Base/TextCursorArea 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "color"; type: "QColor" }
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "textItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "cursorParent"; type: "QQuickItem"; isPointer: true }
        Property { name: "selected"; type: "bool"; isReadonly: true }
        Property { name: "topPadding"; type: "double" }
        Property { name: "menuMap"; type: "QVariant" }
        Property { name: "menuMoreMap"; type: "QVariant" }
        Property { name: "menuMore"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Method { name: "hideMenu"; type: "QVariant" }
        Method { name: "close"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/Tooltip 2.0"
        exports: ["AsemanQml.Base/Tooltip 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "interval"; type: "int" }
        Property { name: "padding"; type: "double" }
        Property { name: "textFont"; type: "QFont" }
        Property { name: "textColor"; type: "QColor" }
        Property { name: "color"; type: "QColor" }
        Method {
            name: "showText"
            type: "QVariant"
            Parameter { name: "text"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/WindowDragArea 2.0"
        exports: ["AsemanQml.Base/WindowDragArea 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/WindowResizeGrip 2.0"
        exports: ["AsemanQml.Base/WindowResizeGrip 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
}
