import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable AsemanQml.Multimedia 2.0'

Module {
    dependencies: ["AsemanQml.Awesome 2.0"]
    Component {
        name: "AsemanAudioEncoderSettings"
        prototype: "QObject"
        exports: ["AsemanQml.Multimedia/AudioEncoderSettings 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "EncodingQuality"
            values: {
                "VeryLowQuality": 0,
                "LowQuality": 1,
                "NormalQuality": 2,
                "HighQuality": 3,
                "VeryHighQuality": 4
            }
        }
        Enum {
            name: "EncodingMode"
            values: {
                "ConstantQualityEncoding": 0,
                "ConstantBitRateEncoding": 1,
                "AverageBitRateEncoding": 2,
                "TwoPassEncoding": 3
            }
        }
        Property { name: "bitRate"; type: "int" }
        Property { name: "channelCount"; type: "int" }
        Property { name: "codec"; type: "string" }
        Property { name: "encodingMode"; type: "int" }
        Property { name: "encodingOptions"; type: "QVariantMap" }
        Property { name: "quality"; type: "int" }
        Property { name: "sampleRate"; type: "int" }
    }
    Component {
        name: "AsemanAudioRecorder"
        prototype: "QObject"
        exports: ["AsemanQml.Multimedia/AudioRecorder 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "State"
            values: {
                "StoppedState": 0,
                "RecordingState": 1,
                "PausedState": 2
            }
        }
        Enum {
            name: "Status"
            values: {
                "UnavailableStatus": 0,
                "UnloadedStatus": 1,
                "LoadingStatus": 2,
                "LoadedStatus": 3,
                "StartingStatus": 4,
                "RecordingStatus": 5,
                "PausedStatus": 6,
                "FinalizingStatus": 7
            }
        }
        Property { name: "encoderSettings"; type: "AsemanAudioEncoderSettings"; isPointer: true }
        Property { name: "output"; type: "QUrl" }
        Property { name: "mute"; type: "bool" }
        Property { name: "available"; type: "bool"; isReadonly: true }
        Property { name: "availability"; type: "int"; isReadonly: true }
        Property { name: "state"; type: "int"; isReadonly: true }
        Property { name: "status"; type: "int"; isReadonly: true }
        Property { name: "volume"; type: "double" }
        Property { name: "audioInput"; type: "string" }
        Property { name: "audioInputs"; type: "QStringList"; isReadonly: true }
        Method { name: "stop" }
        Method { name: "pause" }
        Method { name: "record" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/AboutPage 2.0"
        exports: ["AsemanQml.Base/AboutPage 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "list"; type: "QVariant" }
        Property { name: "defaultColor"; type: "QColor" }
        Property { name: "framesColor"; type: "QColor" }
        Property { name: "textsColor"; type: "QColor" }
    }
    Component {
        prototype: "AsemanQuickObject"
        name: "AsemanQml.Base/AboutPageAseman 2.0"
        exports: ["AsemanQml.Base/AboutPageAseman 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "items"
        Property { name: "title"; type: "string" }
        Property { name: "icon"; type: "QUrl" }
        Property { name: "color"; type: "QColor" }
        Property { name: "delegate"; type: "QQmlComponent"; isPointer: true }
    }
    Component {
        prototype: "AsemanQuickObject"
        name: "AsemanQml.Base/AboutPageItem 2.0"
        exports: ["AsemanQml.Base/AboutPageItem 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "items"
        Property { name: "title"; type: "string" }
        Property { name: "icon"; type: "QUrl" }
        Property { name: "color"; type: "QColor" }
        Property { name: "delegate"; type: "QQmlComponent"; isPointer: true }
    }
    Component {
        prototype: "AsemanMouseEventListener"
        name: "AsemanQml.Base/AndroidListEffect 2.0"
        exports: ["AsemanQml.Base/AndroidListEffect 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "flickable"; type: "QQuickFlickable"; isPointer: true }
        Property { name: "minimumSensivityX"; type: "double" }
        Property { name: "minimumSensivityY"; type: "double" }
        Property { name: "ignoreDelayX"; type: "double" }
        Property { name: "ignoreDelayY"; type: "double" }
        Property { name: "topMargin"; type: "double" }
        Property { name: "bottomMargin"; type: "double" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/AnimationItem 2.0"
        exports: ["AsemanQml.Base/AnimationItem 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "anim"; type: "bool" }
        Property { name: "anim_time"; type: "int" }
        Property { name: "easing"; type: "QEasingCurve" }
        Signal { name: "animationFinished" }
        Method { name: "startAnimation"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickRectangle"
        name: "AsemanQml.Base/AsemanAbout 2.0"
        exports: ["AsemanQml.Base/AsemanAbout 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "darkBackground"; type: "bool"; isReadonly: true }
        Property { name: "textsColor"; type: "QColor" }
        Property { name: "highlightColor"; type: "QColor" }
        Property { name: "backButtonScale"; type: "double" }
        Property { name: "headerColor"; type: "QColor" }
    }
    Component {
        prototype: "AsemanApplicationItem"
        name: "AsemanQml.Base/AsemanApplication 2.0"
        exports: ["AsemanQml.Base/AsemanApplication 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "items"
        Property { name: "source"; type: "QUrl" }
        Property { name: "appMain"; type: "QQuickWindow"; isReadonly: true; isPointer: true }
    }
    Component {
        prototype: "QQuickFlickable"
        name: "AsemanQml.Base/AsemanFlickable 2.0"
        exports: ["AsemanQml.Base/AsemanFlickable 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "flickableData"
        Property { name: "allTimeMode"; type: "bool" }
        Property { name: "tabBarRatio"; type: "double"; isReadonly: true }
        Property { name: "tabBarHeight"; type: "double" }
    }
    Component {
        prototype: "QObject"
        name: "AsemanQml.Base/AsemanFullWindow 2.0"
        exports: ["AsemanQml.Base/AsemanFullWindow 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentData"
        Property { name: "backgroundColor"; type: "QColor" }
        Property {
            name: "pageManager"
            type: "SlidePageManager_QMLTYPE_43"
            isReadonly: true
            isPointer: true
        }
        Property { name: "sidebar"; type: "SideMenu_QMLTYPE_41"; isReadonly: true; isPointer: true }
        Property {
            name: "headerButton"
            type: "HeaderMenuButton_QMLTYPE_34"
            isReadonly: true
            isPointer: true
        }
        Property { name: "backVisible"; type: "bool" }
        Property { name: "main"; type: "QQmlComponent"; isPointer: true }
        Property { name: "drawer"; type: "QQmlComponent"; isPointer: true }
        Property { name: "forceActiveBackButton"; type: "bool" }
        Property { name: "backController"; type: "bool" }
        Property { name: "try_close"; type: "bool" }
        Property { name: "portrait"; type: "bool"; isReadonly: true }
        Property { name: "masterPalette"; type: "QQuickSystemPalette"; isReadonly: true; isPointer: true }
        Property { name: "tooltip"; type: "Tooltip_QMLTYPE_29"; isReadonly: true; isPointer: true }
        Signal { name: "closeRequest" }
        Method { name: "tryClose"; type: "QVariant" }
        Method {
            name: "showTooltip"
            type: "QVariant"
            Parameter { name: "text"; type: "QVariant" }
        }
        Method {
            name: "showGlobalWait"
            type: "QVariant"
            Parameter { name: "text"; type: "QVariant" }
            Parameter { name: "blockBack"; type: "QVariant" }
        }
        Property { name: "background"; type: "QQuickItem"; isPointer: true }
        Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "contentData"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "activeFocusControl"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "header"; type: "QQuickItem"; isPointer: true }
        Property { name: "footer"; type: "QQuickItem"; isPointer: true }
        Property { name: "overlay"; type: "QQuickOverlay"; isReadonly: true; isPointer: true }
        Property { name: "font"; type: "QFont" }
        Property { name: "locale"; type: "QLocale" }
        Property { name: "palette"; revision: 3; type: "QPalette" }
        Property { name: "menuBar"; revision: 3; type: "QQuickItem"; isPointer: true }
        Property { name: "visible"; type: "bool" }
        Property { name: "visibility"; type: "Visibility" }
        Property { name: "screen"; revision: 2; type: "QObject"; isPointer: true }
        Signal {
            name: "visibleChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "visibilityChanged"
            Parameter { name: "visibility"; type: "QWindow::Visibility" }
        }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "color"; type: "QColor" }
        Property {
            name: "activeFocusItem"
            revision: 1
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
        }
        Signal { name: "frameSwapped" }
        Signal {
            name: "openglContextCreated"
            revision: 2
            Parameter { name: "context"; type: "QOpenGLContext"; isPointer: true }
        }
        Signal { name: "sceneGraphInitialized" }
        Signal { name: "sceneGraphInvalidated" }
        Signal { name: "beforeSynchronizing" }
        Signal { name: "afterSynchronizing"; revision: 2 }
        Signal { name: "beforeRendering" }
        Signal { name: "afterRendering" }
        Signal { name: "afterAnimating"; revision: 2 }
        Signal { name: "sceneGraphAboutToStop"; revision: 2 }
        Signal {
            name: "closing"
            revision: 1
            Parameter { name: "close"; type: "QQuickCloseEvent"; isPointer: true }
        }
        Signal {
            name: "colorChanged"
            Parameter { type: "QColor" }
        }
        Signal {
            name: "sceneGraphError"
            revision: 2
            Parameter { name: "error"; type: "QQuickWindow::SceneGraphError" }
            Parameter { name: "message"; type: "string" }
        }
        Method { name: "update" }
        Method { name: "releaseResources" }
        Property { name: "title"; type: "string" }
        Property { name: "modality"; type: "Qt::WindowModality" }
        Property { name: "flags"; type: "Qt::WindowFlags" }
        Property { name: "x"; type: "int" }
        Property { name: "y"; type: "int" }
        Property { name: "width"; type: "int" }
        Property { name: "height"; type: "int" }
        Property { name: "minimumWidth"; type: "int" }
        Property { name: "minimumHeight"; type: "int" }
        Property { name: "maximumWidth"; type: "int" }
        Property { name: "maximumHeight"; type: "int" }
        Property { name: "active"; revision: 1; type: "bool"; isReadonly: true }
        Property { name: "contentOrientation"; type: "Qt::ScreenOrientation" }
        Property { name: "opacity"; revision: 1; type: "double" }
        Signal {
            name: "screenChanged"
            Parameter { name: "screen"; type: "QScreen"; isPointer: true }
        }
        Signal {
            name: "modalityChanged"
            Parameter { name: "modality"; type: "Qt::WindowModality" }
        }
        Signal {
            name: "windowStateChanged"
            Parameter { name: "windowState"; type: "Qt::WindowState" }
        }
        Signal {
            name: "windowTitleChanged"
            revision: 2
            Parameter { name: "title"; type: "string" }
        }
        Signal {
            name: "xChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "yChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "widthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "heightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "contentOrientationChanged"
            Parameter { name: "orientation"; type: "Qt::ScreenOrientation" }
        }
        Signal {
            name: "focusObjectChanged"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "opacityChanged"
            revision: 1
            Parameter { name: "opacity"; type: "double" }
        }
        Method { name: "requestActivate"; revision: 1 }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method { name: "show" }
        Method { name: "hide" }
        Method { name: "showMinimized" }
        Method { name: "showMaximized" }
        Method { name: "showFullScreen" }
        Method { name: "showNormal" }
        Method { name: "close"; type: "bool" }
        Method { name: "raise" }
        Method { name: "lower" }
        Method {
            name: "setTitle"
            Parameter { type: "string" }
        }
        Method {
            name: "setX"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setY"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setWidth"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setHeight"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setGeometry"
            Parameter { name: "posx"; type: "int" }
            Parameter { name: "posy"; type: "int" }
            Parameter { name: "w"; type: "int" }
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "setGeometry"
            Parameter { name: "rect"; type: "QRect" }
        }
        Method {
            name: "setMinimumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMinimumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "setMaximumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMaximumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "alert"
            revision: 1
            Parameter { name: "msec"; type: "int" }
        }
        Method { name: "requestUpdate"; revision: 3 }
    }
    Component {
        prototype: "QQuickGridView"
        name: "AsemanQml.Base/AsemanGridView 2.0"
        exports: ["AsemanQml.Base/AsemanGridView 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "tabBarRatio"; type: "double"; isReadonly: true }
        Property { name: "tabBarHeight"; type: "double" }
    }
    Component {
        prototype: "QQuickListView"
        name: "AsemanQml.Base/AsemanListView 2.0"
        exports: ["AsemanQml.Base/AsemanListView 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "allTimeMode"; type: "bool" }
        Property { name: "tabBarRatio"; type: "double"; isReadonly: true }
        Property { name: "tabBarHeight"; type: "double" }
        Property { name: "tabBarMargin"; type: "double" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/AsemanLogo 2.0"
        exports: ["AsemanQml.Base/AsemanLogo 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "ratio"; type: "double" }
        Property { name: "dark"; type: "bool" }
    }
    Component {
        prototype: "QQuickRectangle"
        name: "AsemanQml.Base/AsemanProductsList 2.0"
        exports: ["AsemanQml.Base/AsemanProductsList 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "source"; type: "QUrl" }
    }
    Component {
        prototype: "QObject"
        name: "AsemanQml.Base/AsemanWindow 2.0"
        exports: ["AsemanQml.Base/AsemanWindow 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentData"
        Property { name: "backController"; type: "bool" }
        Property { name: "try_close"; type: "bool" }
        Property { name: "portrait"; type: "bool"; isReadonly: true }
        Property { name: "masterPalette"; type: "QQuickSystemPalette"; isReadonly: true; isPointer: true }
        Property { name: "tooltip"; type: "Tooltip_QMLTYPE_29"; isReadonly: true; isPointer: true }
        Signal { name: "closeRequest" }
        Method { name: "tryClose"; type: "QVariant" }
        Method {
            name: "showTooltip"
            type: "QVariant"
            Parameter { name: "text"; type: "QVariant" }
        }
        Method {
            name: "showGlobalWait"
            type: "QVariant"
            Parameter { name: "text"; type: "QVariant" }
            Parameter { name: "blockBack"; type: "QVariant" }
        }
        Property { name: "background"; type: "QQuickItem"; isPointer: true }
        Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "contentData"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "activeFocusControl"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "header"; type: "QQuickItem"; isPointer: true }
        Property { name: "footer"; type: "QQuickItem"; isPointer: true }
        Property { name: "overlay"; type: "QQuickOverlay"; isReadonly: true; isPointer: true }
        Property { name: "font"; type: "QFont" }
        Property { name: "locale"; type: "QLocale" }
        Property { name: "palette"; revision: 3; type: "QPalette" }
        Property { name: "menuBar"; revision: 3; type: "QQuickItem"; isPointer: true }
        Property { name: "visible"; type: "bool" }
        Property { name: "visibility"; type: "Visibility" }
        Property { name: "screen"; revision: 2; type: "QObject"; isPointer: true }
        Signal {
            name: "visibleChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "visibilityChanged"
            Parameter { name: "visibility"; type: "QWindow::Visibility" }
        }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "color"; type: "QColor" }
        Property {
            name: "activeFocusItem"
            revision: 1
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
        }
        Signal { name: "frameSwapped" }
        Signal {
            name: "openglContextCreated"
            revision: 2
            Parameter { name: "context"; type: "QOpenGLContext"; isPointer: true }
        }
        Signal { name: "sceneGraphInitialized" }
        Signal { name: "sceneGraphInvalidated" }
        Signal { name: "beforeSynchronizing" }
        Signal { name: "afterSynchronizing"; revision: 2 }
        Signal { name: "beforeRendering" }
        Signal { name: "afterRendering" }
        Signal { name: "afterAnimating"; revision: 2 }
        Signal { name: "sceneGraphAboutToStop"; revision: 2 }
        Signal {
            name: "closing"
            revision: 1
            Parameter { name: "close"; type: "QQuickCloseEvent"; isPointer: true }
        }
        Signal {
            name: "colorChanged"
            Parameter { type: "QColor" }
        }
        Signal {
            name: "sceneGraphError"
            revision: 2
            Parameter { name: "error"; type: "QQuickWindow::SceneGraphError" }
            Parameter { name: "message"; type: "string" }
        }
        Method { name: "update" }
        Method { name: "releaseResources" }
        Property { name: "title"; type: "string" }
        Property { name: "modality"; type: "Qt::WindowModality" }
        Property { name: "flags"; type: "Qt::WindowFlags" }
        Property { name: "x"; type: "int" }
        Property { name: "y"; type: "int" }
        Property { name: "width"; type: "int" }
        Property { name: "height"; type: "int" }
        Property { name: "minimumWidth"; type: "int" }
        Property { name: "minimumHeight"; type: "int" }
        Property { name: "maximumWidth"; type: "int" }
        Property { name: "maximumHeight"; type: "int" }
        Property { name: "active"; revision: 1; type: "bool"; isReadonly: true }
        Property { name: "contentOrientation"; type: "Qt::ScreenOrientation" }
        Property { name: "opacity"; revision: 1; type: "double" }
        Signal {
            name: "screenChanged"
            Parameter { name: "screen"; type: "QScreen"; isPointer: true }
        }
        Signal {
            name: "modalityChanged"
            Parameter { name: "modality"; type: "Qt::WindowModality" }
        }
        Signal {
            name: "windowStateChanged"
            Parameter { name: "windowState"; type: "Qt::WindowState" }
        }
        Signal {
            name: "windowTitleChanged"
            revision: 2
            Parameter { name: "title"; type: "string" }
        }
        Signal {
            name: "xChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "yChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "widthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "heightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "contentOrientationChanged"
            Parameter { name: "orientation"; type: "Qt::ScreenOrientation" }
        }
        Signal {
            name: "focusObjectChanged"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "opacityChanged"
            revision: 1
            Parameter { name: "opacity"; type: "double" }
        }
        Method { name: "requestActivate"; revision: 1 }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method { name: "show" }
        Method { name: "hide" }
        Method { name: "showMinimized" }
        Method { name: "showMaximized" }
        Method { name: "showFullScreen" }
        Method { name: "showNormal" }
        Method { name: "close"; type: "bool" }
        Method { name: "raise" }
        Method { name: "lower" }
        Method {
            name: "setTitle"
            Parameter { type: "string" }
        }
        Method {
            name: "setX"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setY"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setWidth"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setHeight"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setGeometry"
            Parameter { name: "posx"; type: "int" }
            Parameter { name: "posy"; type: "int" }
            Parameter { name: "w"; type: "int" }
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "setGeometry"
            Parameter { name: "rect"; type: "QRect" }
        }
        Method {
            name: "setMinimumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMinimumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "setMaximumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMaximumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "alert"
            revision: 1
            Parameter { name: "msec"; type: "int" }
        }
        Method { name: "requestUpdate"; revision: 3 }
    }
    Component {
        prototype: "AsemanQuickObject"
        name: "AsemanQml.Awesome/Awesome 2.0"
        exports: ["AsemanQml.Awesome/Awesome 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        isCreatable: false
        isSingleton: true
        defaultProperty: "items"
        Property { name: "family"; type: "string"; isReadonly: true }
        Property { name: "fa_500px"; type: "string"; isReadonly: true }
        Property { name: "fa_adjust"; type: "string"; isReadonly: true }
        Property { name: "fa_adn"; type: "string"; isReadonly: true }
        Property { name: "fa_align_center"; type: "string"; isReadonly: true }
        Property { name: "fa_align_justify"; type: "string"; isReadonly: true }
        Property { name: "fa_align_left"; type: "string"; isReadonly: true }
        Property { name: "fa_align_right"; type: "string"; isReadonly: true }
        Property { name: "fa_amazon"; type: "string"; isReadonly: true }
        Property { name: "fa_ambulance"; type: "string"; isReadonly: true }
        Property { name: "fa_anchor"; type: "string"; isReadonly: true }
        Property { name: "fa_android"; type: "string"; isReadonly: true }
        Property { name: "fa_angellist"; type: "string"; isReadonly: true }
        Property { name: "fa_angle_double_down"; type: "string"; isReadonly: true }
        Property { name: "fa_angle_double_left"; type: "string"; isReadonly: true }
        Property { name: "fa_angle_double_right"; type: "string"; isReadonly: true }
        Property { name: "fa_angle_double_up"; type: "string"; isReadonly: true }
        Property { name: "fa_angle_down"; type: "string"; isReadonly: true }
        Property { name: "fa_angle_left"; type: "string"; isReadonly: true }
        Property { name: "fa_angle_right"; type: "string"; isReadonly: true }
        Property { name: "fa_angle_up"; type: "string"; isReadonly: true }
        Property { name: "fa_apple"; type: "string"; isReadonly: true }
        Property { name: "fa_archive"; type: "string"; isReadonly: true }
        Property { name: "fa_area_chart"; type: "string"; isReadonly: true }
        Property { name: "fa_arrow_circle_down"; type: "string"; isReadonly: true }
        Property { name: "fa_arrow_circle_left"; type: "string"; isReadonly: true }
        Property { name: "fa_arrow_circle_o_down"; type: "string"; isReadonly: true }
        Property { name: "fa_arrow_circle_o_left"; type: "string"; isReadonly: true }
        Property { name: "fa_arrow_circle_o_right"; type: "string"; isReadonly: true }
        Property { name: "fa_arrow_circle_o_up"; type: "string"; isReadonly: true }
        Property { name: "fa_arrow_circle_right"; type: "string"; isReadonly: true }
        Property { name: "fa_arrow_circle_up"; type: "string"; isReadonly: true }
        Property { name: "fa_arrow_down"; type: "string"; isReadonly: true }
        Property { name: "fa_arrow_left"; type: "string"; isReadonly: true }
        Property { name: "fa_arrow_right"; type: "string"; isReadonly: true }
        Property { name: "fa_arrow_up"; type: "string"; isReadonly: true }
        Property { name: "fa_arrows"; type: "string"; isReadonly: true }
        Property { name: "fa_arrows_alt"; type: "string"; isReadonly: true }
        Property { name: "fa_arrows_h"; type: "string"; isReadonly: true }
        Property { name: "fa_arrows_v"; type: "string"; isReadonly: true }
        Property { name: "fa_asterisk"; type: "string"; isReadonly: true }
        Property { name: "fa_at"; type: "string"; isReadonly: true }
        Property { name: "fa_automobile"; type: "string"; isReadonly: true }
        Property { name: "fa_backward"; type: "string"; isReadonly: true }
        Property { name: "fa_balance_scale"; type: "string"; isReadonly: true }
        Property { name: "fa_ban"; type: "string"; isReadonly: true }
        Property { name: "fa_bank"; type: "string"; isReadonly: true }
        Property { name: "fa_bar_chart"; type: "string"; isReadonly: true }
        Property { name: "fa_bar_chart_o"; type: "string"; isReadonly: true }
        Property { name: "fa_barcode"; type: "string"; isReadonly: true }
        Property { name: "fa_bars"; type: "string"; isReadonly: true }
        Property { name: "fa_battery_0"; type: "string"; isReadonly: true }
        Property { name: "fa_battery_1"; type: "string"; isReadonly: true }
        Property { name: "fa_battery_2"; type: "string"; isReadonly: true }
        Property { name: "fa_battery_3"; type: "string"; isReadonly: true }
        Property { name: "fa_battery_4"; type: "string"; isReadonly: true }
        Property { name: "fa_battery_empty"; type: "string"; isReadonly: true }
        Property { name: "fa_battery_full"; type: "string"; isReadonly: true }
        Property { name: "fa_battery_half"; type: "string"; isReadonly: true }
        Property { name: "fa_battery_quarter"; type: "string"; isReadonly: true }
        Property { name: "fa_battery_three_quarters"; type: "string"; isReadonly: true }
        Property { name: "fa_bed"; type: "string"; isReadonly: true }
        Property { name: "fa_beer"; type: "string"; isReadonly: true }
        Property { name: "fa_behance"; type: "string"; isReadonly: true }
        Property { name: "fa_behance_square"; type: "string"; isReadonly: true }
        Property { name: "fa_bell"; type: "string"; isReadonly: true }
        Property { name: "fa_bell_o"; type: "string"; isReadonly: true }
        Property { name: "fa_bell_slash"; type: "string"; isReadonly: true }
        Property { name: "fa_bell_slash_o"; type: "string"; isReadonly: true }
        Property { name: "fa_bicycle"; type: "string"; isReadonly: true }
        Property { name: "fa_binoculars"; type: "string"; isReadonly: true }
        Property { name: "fa_birthday_cake"; type: "string"; isReadonly: true }
        Property { name: "fa_bitbucket"; type: "string"; isReadonly: true }
        Property { name: "fa_bitbucket_square"; type: "string"; isReadonly: true }
        Property { name: "fa_bitcoin"; type: "string"; isReadonly: true }
        Property { name: "fa_black_tie"; type: "string"; isReadonly: true }
        Property { name: "fa_bluetooth"; type: "string"; isReadonly: true }
        Property { name: "fa_bluetooth_b"; type: "string"; isReadonly: true }
        Property { name: "fa_bold"; type: "string"; isReadonly: true }
        Property { name: "fa_bolt"; type: "string"; isReadonly: true }
        Property { name: "fa_bomb"; type: "string"; isReadonly: true }
        Property { name: "fa_book"; type: "string"; isReadonly: true }
        Property { name: "fa_bookmark"; type: "string"; isReadonly: true }
        Property { name: "fa_bookmark_o"; type: "string"; isReadonly: true }
        Property { name: "fa_briefcase"; type: "string"; isReadonly: true }
        Property { name: "fa_btc"; type: "string"; isReadonly: true }
        Property { name: "fa_bug"; type: "string"; isReadonly: true }
        Property { name: "fa_building"; type: "string"; isReadonly: true }
        Property { name: "fa_building_o"; type: "string"; isReadonly: true }
        Property { name: "fa_bullhorn"; type: "string"; isReadonly: true }
        Property { name: "fa_bullseye"; type: "string"; isReadonly: true }
        Property { name: "fa_bus"; type: "string"; isReadonly: true }
        Property { name: "fa_buysellads"; type: "string"; isReadonly: true }
        Property { name: "fa_cab"; type: "string"; isReadonly: true }
        Property { name: "fa_calculator"; type: "string"; isReadonly: true }
        Property { name: "fa_calendar"; type: "string"; isReadonly: true }
        Property { name: "fa_calendar_check_o"; type: "string"; isReadonly: true }
        Property { name: "fa_calendar_minus_o"; type: "string"; isReadonly: true }
        Property { name: "fa_calendar_o"; type: "string"; isReadonly: true }
        Property { name: "fa_calendar_plus_o"; type: "string"; isReadonly: true }
        Property { name: "fa_calendar_times_o"; type: "string"; isReadonly: true }
        Property { name: "fa_camera"; type: "string"; isReadonly: true }
        Property { name: "fa_camera_retro"; type: "string"; isReadonly: true }
        Property { name: "fa_car"; type: "string"; isReadonly: true }
        Property { name: "fa_caret_down"; type: "string"; isReadonly: true }
        Property { name: "fa_caret_left"; type: "string"; isReadonly: true }
        Property { name: "fa_caret_right"; type: "string"; isReadonly: true }
        Property { name: "fa_caret_square_o_down"; type: "string"; isReadonly: true }
        Property { name: "fa_caret_square_o_left"; type: "string"; isReadonly: true }
        Property { name: "fa_caret_square_o_right"; type: "string"; isReadonly: true }
        Property { name: "fa_caret_square_o_up"; type: "string"; isReadonly: true }
        Property { name: "fa_caret_up"; type: "string"; isReadonly: true }
        Property { name: "fa_cart_arrow_down"; type: "string"; isReadonly: true }
        Property { name: "fa_cart_plus"; type: "string"; isReadonly: true }
        Property { name: "fa_cc"; type: "string"; isReadonly: true }
        Property { name: "fa_cc_amex"; type: "string"; isReadonly: true }
        Property { name: "fa_cc_diners_club"; type: "string"; isReadonly: true }
        Property { name: "fa_cc_discover"; type: "string"; isReadonly: true }
        Property { name: "fa_cc_jcb"; type: "string"; isReadonly: true }
        Property { name: "fa_cc_mastercard"; type: "string"; isReadonly: true }
        Property { name: "fa_cc_paypal"; type: "string"; isReadonly: true }
        Property { name: "fa_cc_stripe"; type: "string"; isReadonly: true }
        Property { name: "fa_cc_visa"; type: "string"; isReadonly: true }
        Property { name: "fa_certificate"; type: "string"; isReadonly: true }
        Property { name: "fa_chain"; type: "string"; isReadonly: true }
        Property { name: "fa_chain_broken"; type: "string"; isReadonly: true }
        Property { name: "fa_check"; type: "string"; isReadonly: true }
        Property { name: "fa_check_circle"; type: "string"; isReadonly: true }
        Property { name: "fa_check_circle_o"; type: "string"; isReadonly: true }
        Property { name: "fa_check_square"; type: "string"; isReadonly: true }
        Property { name: "fa_check_square_o"; type: "string"; isReadonly: true }
        Property { name: "fa_chevron_circle_down"; type: "string"; isReadonly: true }
        Property { name: "fa_chevron_circle_left"; type: "string"; isReadonly: true }
        Property { name: "fa_chevron_circle_right"; type: "string"; isReadonly: true }
        Property { name: "fa_chevron_circle_up"; type: "string"; isReadonly: true }
        Property { name: "fa_chevron_down"; type: "string"; isReadonly: true }
        Property { name: "fa_chevron_left"; type: "string"; isReadonly: true }
        Property { name: "fa_chevron_right"; type: "string"; isReadonly: true }
        Property { name: "fa_chevron_up"; type: "string"; isReadonly: true }
        Property { name: "fa_child"; type: "string"; isReadonly: true }
        Property { name: "fa_chrome"; type: "string"; isReadonly: true }
        Property { name: "fa_circle"; type: "string"; isReadonly: true }
        Property { name: "fa_circle_o"; type: "string"; isReadonly: true }
        Property { name: "fa_circle_o_notch"; type: "string"; isReadonly: true }
        Property { name: "fa_circle_thin"; type: "string"; isReadonly: true }
        Property { name: "fa_clipboard"; type: "string"; isReadonly: true }
        Property { name: "fa_clock_o"; type: "string"; isReadonly: true }
        Property { name: "fa_clone"; type: "string"; isReadonly: true }
        Property { name: "fa_close"; type: "string"; isReadonly: true }
        Property { name: "fa_cloud"; type: "string"; isReadonly: true }
        Property { name: "fa_cloud_download"; type: "string"; isReadonly: true }
        Property { name: "fa_cloud_upload"; type: "string"; isReadonly: true }
        Property { name: "fa_cny"; type: "string"; isReadonly: true }
        Property { name: "fa_code"; type: "string"; isReadonly: true }
        Property { name: "fa_code_fork"; type: "string"; isReadonly: true }
        Property { name: "fa_codepen"; type: "string"; isReadonly: true }
        Property { name: "fa_codiepie"; type: "string"; isReadonly: true }
        Property { name: "fa_coffee"; type: "string"; isReadonly: true }
        Property { name: "fa_cog"; type: "string"; isReadonly: true }
        Property { name: "fa_cogs"; type: "string"; isReadonly: true }
        Property { name: "fa_columns"; type: "string"; isReadonly: true }
        Property { name: "fa_comment"; type: "string"; isReadonly: true }
        Property { name: "fa_comment_o"; type: "string"; isReadonly: true }
        Property { name: "fa_commenting"; type: "string"; isReadonly: true }
        Property { name: "fa_commenting_o"; type: "string"; isReadonly: true }
        Property { name: "fa_comments"; type: "string"; isReadonly: true }
        Property { name: "fa_comments_o"; type: "string"; isReadonly: true }
        Property { name: "fa_compass"; type: "string"; isReadonly: true }
        Property { name: "fa_compress"; type: "string"; isReadonly: true }
        Property { name: "fa_connectdevelop"; type: "string"; isReadonly: true }
        Property { name: "fa_contao"; type: "string"; isReadonly: true }
        Property { name: "fa_copy"; type: "string"; isReadonly: true }
        Property { name: "fa_copyright"; type: "string"; isReadonly: true }
        Property { name: "fa_creative_commons"; type: "string"; isReadonly: true }
        Property { name: "fa_credit_card"; type: "string"; isReadonly: true }
        Property { name: "fa_credit_card_alt"; type: "string"; isReadonly: true }
        Property { name: "fa_crop"; type: "string"; isReadonly: true }
        Property { name: "fa_crosshairs"; type: "string"; isReadonly: true }
        Property { name: "fa_css3"; type: "string"; isReadonly: true }
        Property { name: "fa_cube"; type: "string"; isReadonly: true }
        Property { name: "fa_cubes"; type: "string"; isReadonly: true }
        Property { name: "fa_cut"; type: "string"; isReadonly: true }
        Property { name: "fa_cutlery"; type: "string"; isReadonly: true }
        Property { name: "fa_dashboard"; type: "string"; isReadonly: true }
        Property { name: "fa_dashcube"; type: "string"; isReadonly: true }
        Property { name: "fa_database"; type: "string"; isReadonly: true }
        Property { name: "fa_dedent"; type: "string"; isReadonly: true }
        Property { name: "fa_delicious"; type: "string"; isReadonly: true }
        Property { name: "fa_desktop"; type: "string"; isReadonly: true }
        Property { name: "fa_deviantart"; type: "string"; isReadonly: true }
        Property { name: "fa_diamond"; type: "string"; isReadonly: true }
        Property { name: "fa_digg"; type: "string"; isReadonly: true }
        Property { name: "fa_dollar"; type: "string"; isReadonly: true }
        Property { name: "fa_dot_circle_o"; type: "string"; isReadonly: true }
        Property { name: "fa_download"; type: "string"; isReadonly: true }
        Property { name: "fa_dribbble"; type: "string"; isReadonly: true }
        Property { name: "fa_dropbox"; type: "string"; isReadonly: true }
        Property { name: "fa_drupal"; type: "string"; isReadonly: true }
        Property { name: "fa_edge"; type: "string"; isReadonly: true }
        Property { name: "fa_edit"; type: "string"; isReadonly: true }
        Property { name: "fa_eject"; type: "string"; isReadonly: true }
        Property { name: "fa_ellipsis_h"; type: "string"; isReadonly: true }
        Property { name: "fa_ellipsis_v"; type: "string"; isReadonly: true }
        Property { name: "fa_empire"; type: "string"; isReadonly: true }
        Property { name: "fa_envelope"; type: "string"; isReadonly: true }
        Property { name: "fa_envelope_o"; type: "string"; isReadonly: true }
        Property { name: "fa_envelope_square"; type: "string"; isReadonly: true }
        Property { name: "fa_eraser"; type: "string"; isReadonly: true }
        Property { name: "fa_eur"; type: "string"; isReadonly: true }
        Property { name: "fa_euro"; type: "string"; isReadonly: true }
        Property { name: "fa_exchange"; type: "string"; isReadonly: true }
        Property { name: "fa_exclamation"; type: "string"; isReadonly: true }
        Property { name: "fa_exclamation_circle"; type: "string"; isReadonly: true }
        Property { name: "fa_exclamation_triangle"; type: "string"; isReadonly: true }
        Property { name: "fa_expand"; type: "string"; isReadonly: true }
        Property { name: "fa_expeditedssl"; type: "string"; isReadonly: true }
        Property { name: "fa_external_link"; type: "string"; isReadonly: true }
        Property { name: "fa_external_link_square"; type: "string"; isReadonly: true }
        Property { name: "fa_eye"; type: "string"; isReadonly: true }
        Property { name: "fa_eye_slash"; type: "string"; isReadonly: true }
        Property { name: "fa_eyedropper"; type: "string"; isReadonly: true }
        Property { name: "fa_facebook"; type: "string"; isReadonly: true }
        Property { name: "fa_facebook_f"; type: "string"; isReadonly: true }
        Property { name: "fa_facebook_official"; type: "string"; isReadonly: true }
        Property { name: "fa_facebook_square"; type: "string"; isReadonly: true }
        Property { name: "fa_fast_backward"; type: "string"; isReadonly: true }
        Property { name: "fa_fast_forward"; type: "string"; isReadonly: true }
        Property { name: "fa_fax"; type: "string"; isReadonly: true }
        Property { name: "fa_feed"; type: "string"; isReadonly: true }
        Property { name: "fa_female"; type: "string"; isReadonly: true }
        Property { name: "fa_fighter_jet"; type: "string"; isReadonly: true }
        Property { name: "fa_file"; type: "string"; isReadonly: true }
        Property { name: "fa_file_archive_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_audio_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_code_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_excel_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_image_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_movie_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_pdf_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_photo_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_picture_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_powerpoint_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_sound_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_text"; type: "string"; isReadonly: true }
        Property { name: "fa_file_text_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_video_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_word_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_zip_o"; type: "string"; isReadonly: true }
        Property { name: "fa_files_o"; type: "string"; isReadonly: true }
        Property { name: "fa_film"; type: "string"; isReadonly: true }
        Property { name: "fa_filter"; type: "string"; isReadonly: true }
        Property { name: "fa_fire"; type: "string"; isReadonly: true }
        Property { name: "fa_fire_extinguisher"; type: "string"; isReadonly: true }
        Property { name: "fa_firefox"; type: "string"; isReadonly: true }
        Property { name: "fa_flag"; type: "string"; isReadonly: true }
        Property { name: "fa_flag_checkered"; type: "string"; isReadonly: true }
        Property { name: "fa_flag_o"; type: "string"; isReadonly: true }
        Property { name: "fa_flash"; type: "string"; isReadonly: true }
        Property { name: "fa_flask"; type: "string"; isReadonly: true }
        Property { name: "fa_flickr"; type: "string"; isReadonly: true }
        Property { name: "fa_floppy_o"; type: "string"; isReadonly: true }
        Property { name: "fa_folder"; type: "string"; isReadonly: true }
        Property { name: "fa_folder_o"; type: "string"; isReadonly: true }
        Property { name: "fa_folder_open"; type: "string"; isReadonly: true }
        Property { name: "fa_folder_open_o"; type: "string"; isReadonly: true }
        Property { name: "fa_font"; type: "string"; isReadonly: true }
        Property { name: "fa_fonticons"; type: "string"; isReadonly: true }
        Property { name: "fa_fort_awesome"; type: "string"; isReadonly: true }
        Property { name: "fa_forumbee"; type: "string"; isReadonly: true }
        Property { name: "fa_forward"; type: "string"; isReadonly: true }
        Property { name: "fa_foursquare"; type: "string"; isReadonly: true }
        Property { name: "fa_frown_o"; type: "string"; isReadonly: true }
        Property { name: "fa_futbol_o"; type: "string"; isReadonly: true }
        Property { name: "fa_gamepad"; type: "string"; isReadonly: true }
        Property { name: "fa_gavel"; type: "string"; isReadonly: true }
        Property { name: "fa_gbp"; type: "string"; isReadonly: true }
        Property { name: "fa_ge"; type: "string"; isReadonly: true }
        Property { name: "fa_gear"; type: "string"; isReadonly: true }
        Property { name: "fa_gears"; type: "string"; isReadonly: true }
        Property { name: "fa_genderless"; type: "string"; isReadonly: true }
        Property { name: "fa_get_pocket"; type: "string"; isReadonly: true }
        Property { name: "fa_gg"; type: "string"; isReadonly: true }
        Property { name: "fa_gg_circle"; type: "string"; isReadonly: true }
        Property { name: "fa_gift"; type: "string"; isReadonly: true }
        Property { name: "fa_git"; type: "string"; isReadonly: true }
        Property { name: "fa_git_square"; type: "string"; isReadonly: true }
        Property { name: "fa_github"; type: "string"; isReadonly: true }
        Property { name: "fa_github_alt"; type: "string"; isReadonly: true }
        Property { name: "fa_github_square"; type: "string"; isReadonly: true }
        Property { name: "fa_gittip"; type: "string"; isReadonly: true }
        Property { name: "fa_glass"; type: "string"; isReadonly: true }
        Property { name: "fa_globe"; type: "string"; isReadonly: true }
        Property { name: "fa_google"; type: "string"; isReadonly: true }
        Property { name: "fa_google_plus"; type: "string"; isReadonly: true }
        Property { name: "fa_google_plus_square"; type: "string"; isReadonly: true }
        Property { name: "fa_google_wallet"; type: "string"; isReadonly: true }
        Property { name: "fa_graduation_cap"; type: "string"; isReadonly: true }
        Property { name: "fa_gratipay"; type: "string"; isReadonly: true }
        Property { name: "fa_group"; type: "string"; isReadonly: true }
        Property { name: "fa_h_square"; type: "string"; isReadonly: true }
        Property { name: "fa_hacker_news"; type: "string"; isReadonly: true }
        Property { name: "fa_hand_grab_o"; type: "string"; isReadonly: true }
        Property { name: "fa_hand_lizard_o"; type: "string"; isReadonly: true }
        Property { name: "fa_hand_o_down"; type: "string"; isReadonly: true }
        Property { name: "fa_hand_o_left"; type: "string"; isReadonly: true }
        Property { name: "fa_hand_o_right"; type: "string"; isReadonly: true }
        Property { name: "fa_hand_o_up"; type: "string"; isReadonly: true }
        Property { name: "fa_hand_paper_o"; type: "string"; isReadonly: true }
        Property { name: "fa_hand_peace_o"; type: "string"; isReadonly: true }
        Property { name: "fa_hand_pointer_o"; type: "string"; isReadonly: true }
        Property { name: "fa_hand_rock_o"; type: "string"; isReadonly: true }
        Property { name: "fa_hand_scissors_o"; type: "string"; isReadonly: true }
        Property { name: "fa_hand_spock_o"; type: "string"; isReadonly: true }
        Property { name: "fa_hand_stop_o"; type: "string"; isReadonly: true }
        Property { name: "fa_hashtag"; type: "string"; isReadonly: true }
        Property { name: "fa_hdd_o"; type: "string"; isReadonly: true }
        Property { name: "fa_header"; type: "string"; isReadonly: true }
        Property { name: "fa_headphones"; type: "string"; isReadonly: true }
        Property { name: "fa_heart"; type: "string"; isReadonly: true }
        Property { name: "fa_heart_o"; type: "string"; isReadonly: true }
        Property { name: "fa_heartbeat"; type: "string"; isReadonly: true }
        Property { name: "fa_history"; type: "string"; isReadonly: true }
        Property { name: "fa_home"; type: "string"; isReadonly: true }
        Property { name: "fa_hospital_o"; type: "string"; isReadonly: true }
        Property { name: "fa_hotel"; type: "string"; isReadonly: true }
        Property { name: "fa_hourglass"; type: "string"; isReadonly: true }
        Property { name: "fa_hourglass_1"; type: "string"; isReadonly: true }
        Property { name: "fa_hourglass_2"; type: "string"; isReadonly: true }
        Property { name: "fa_hourglass_3"; type: "string"; isReadonly: true }
        Property { name: "fa_hourglass_end"; type: "string"; isReadonly: true }
        Property { name: "fa_hourglass_half"; type: "string"; isReadonly: true }
        Property { name: "fa_hourglass_o"; type: "string"; isReadonly: true }
        Property { name: "fa_hourglass_start"; type: "string"; isReadonly: true }
        Property { name: "fa_houzz"; type: "string"; isReadonly: true }
        Property { name: "fa_html5"; type: "string"; isReadonly: true }
        Property { name: "fa_i_cursor"; type: "string"; isReadonly: true }
        Property { name: "fa_ils"; type: "string"; isReadonly: true }
        Property { name: "fa_image"; type: "string"; isReadonly: true }
        Property { name: "fa_inbox"; type: "string"; isReadonly: true }
        Property { name: "fa_indent"; type: "string"; isReadonly: true }
        Property { name: "fa_industry"; type: "string"; isReadonly: true }
        Property { name: "fa_info"; type: "string"; isReadonly: true }
        Property { name: "fa_info_circle"; type: "string"; isReadonly: true }
        Property { name: "fa_inr"; type: "string"; isReadonly: true }
        Property { name: "fa_instagram"; type: "string"; isReadonly: true }
        Property { name: "fa_institution"; type: "string"; isReadonly: true }
        Property { name: "fa_internet_explorer"; type: "string"; isReadonly: true }
        Property { name: "fa_intersex"; type: "string"; isReadonly: true }
        Property { name: "fa_ioxhost"; type: "string"; isReadonly: true }
        Property { name: "fa_italic"; type: "string"; isReadonly: true }
        Property { name: "fa_joomla"; type: "string"; isReadonly: true }
        Property { name: "fa_jpy"; type: "string"; isReadonly: true }
        Property { name: "fa_jsfiddle"; type: "string"; isReadonly: true }
        Property { name: "fa_key"; type: "string"; isReadonly: true }
        Property { name: "fa_keyboard_o"; type: "string"; isReadonly: true }
        Property { name: "fa_krw"; type: "string"; isReadonly: true }
        Property { name: "fa_language"; type: "string"; isReadonly: true }
        Property { name: "fa_laptop"; type: "string"; isReadonly: true }
        Property { name: "fa_lastfm"; type: "string"; isReadonly: true }
        Property { name: "fa_lastfm_square"; type: "string"; isReadonly: true }
        Property { name: "fa_leaf"; type: "string"; isReadonly: true }
        Property { name: "fa_leanpub"; type: "string"; isReadonly: true }
        Property { name: "fa_legal"; type: "string"; isReadonly: true }
        Property { name: "fa_lemon_o"; type: "string"; isReadonly: true }
        Property { name: "fa_level_down"; type: "string"; isReadonly: true }
        Property { name: "fa_level_up"; type: "string"; isReadonly: true }
        Property { name: "fa_life_bouy"; type: "string"; isReadonly: true }
        Property { name: "fa_life_buoy"; type: "string"; isReadonly: true }
        Property { name: "fa_life_ring"; type: "string"; isReadonly: true }
        Property { name: "fa_life_saver"; type: "string"; isReadonly: true }
        Property { name: "fa_lightbulb_o"; type: "string"; isReadonly: true }
        Property { name: "fa_line_chart"; type: "string"; isReadonly: true }
        Property { name: "fa_link"; type: "string"; isReadonly: true }
        Property { name: "fa_linkedin"; type: "string"; isReadonly: true }
        Property { name: "fa_linkedin_square"; type: "string"; isReadonly: true }
        Property { name: "fa_linux"; type: "string"; isReadonly: true }
        Property { name: "fa_list"; type: "string"; isReadonly: true }
        Property { name: "fa_list_alt"; type: "string"; isReadonly: true }
        Property { name: "fa_list_ol"; type: "string"; isReadonly: true }
        Property { name: "fa_list_ul"; type: "string"; isReadonly: true }
        Property { name: "fa_location_arrow"; type: "string"; isReadonly: true }
        Property { name: "fa_lock"; type: "string"; isReadonly: true }
        Property { name: "fa_long_arrow_down"; type: "string"; isReadonly: true }
        Property { name: "fa_long_arrow_left"; type: "string"; isReadonly: true }
        Property { name: "fa_long_arrow_right"; type: "string"; isReadonly: true }
        Property { name: "fa_long_arrow_up"; type: "string"; isReadonly: true }
        Property { name: "fa_magic"; type: "string"; isReadonly: true }
        Property { name: "fa_magnet"; type: "string"; isReadonly: true }
        Property { name: "fa_mail_forward"; type: "string"; isReadonly: true }
        Property { name: "fa_mail_reply"; type: "string"; isReadonly: true }
        Property { name: "fa_mail_reply_all"; type: "string"; isReadonly: true }
        Property { name: "fa_male"; type: "string"; isReadonly: true }
        Property { name: "fa_map"; type: "string"; isReadonly: true }
        Property { name: "fa_map_marker"; type: "string"; isReadonly: true }
        Property { name: "fa_map_o"; type: "string"; isReadonly: true }
        Property { name: "fa_map_pin"; type: "string"; isReadonly: true }
        Property { name: "fa_map_signs"; type: "string"; isReadonly: true }
        Property { name: "fa_mars"; type: "string"; isReadonly: true }
        Property { name: "fa_mars_double"; type: "string"; isReadonly: true }
        Property { name: "fa_mars_stroke"; type: "string"; isReadonly: true }
        Property { name: "fa_mars_stroke_h"; type: "string"; isReadonly: true }
        Property { name: "fa_mars_stroke_v"; type: "string"; isReadonly: true }
        Property { name: "fa_maxcdn"; type: "string"; isReadonly: true }
        Property { name: "fa_meanpath"; type: "string"; isReadonly: true }
        Property { name: "fa_medium"; type: "string"; isReadonly: true }
        Property { name: "fa_medkit"; type: "string"; isReadonly: true }
        Property { name: "fa_meh_o"; type: "string"; isReadonly: true }
        Property { name: "fa_mercury"; type: "string"; isReadonly: true }
        Property { name: "fa_microphone"; type: "string"; isReadonly: true }
        Property { name: "fa_microphone_slash"; type: "string"; isReadonly: true }
        Property { name: "fa_minus"; type: "string"; isReadonly: true }
        Property { name: "fa_minus_circle"; type: "string"; isReadonly: true }
        Property { name: "fa_minus_square"; type: "string"; isReadonly: true }
        Property { name: "fa_minus_square_o"; type: "string"; isReadonly: true }
        Property { name: "fa_mixcloud"; type: "string"; isReadonly: true }
        Property { name: "fa_mobile"; type: "string"; isReadonly: true }
        Property { name: "fa_mobile_phone"; type: "string"; isReadonly: true }
        Property { name: "fa_modx"; type: "string"; isReadonly: true }
        Property { name: "fa_money"; type: "string"; isReadonly: true }
        Property { name: "fa_moon_o"; type: "string"; isReadonly: true }
        Property { name: "fa_mortar_board"; type: "string"; isReadonly: true }
        Property { name: "fa_motorcycle"; type: "string"; isReadonly: true }
        Property { name: "fa_mouse_pointer"; type: "string"; isReadonly: true }
        Property { name: "fa_music"; type: "string"; isReadonly: true }
        Property { name: "fa_navicon"; type: "string"; isReadonly: true }
        Property { name: "fa_neuter"; type: "string"; isReadonly: true }
        Property { name: "fa_newspaper_o"; type: "string"; isReadonly: true }
        Property { name: "fa_object_group"; type: "string"; isReadonly: true }
        Property { name: "fa_object_ungroup"; type: "string"; isReadonly: true }
        Property { name: "fa_odnoklassniki"; type: "string"; isReadonly: true }
        Property { name: "fa_odnoklassniki_square"; type: "string"; isReadonly: true }
        Property { name: "fa_opencart"; type: "string"; isReadonly: true }
        Property { name: "fa_openid"; type: "string"; isReadonly: true }
        Property { name: "fa_opera"; type: "string"; isReadonly: true }
        Property { name: "fa_optin_monster"; type: "string"; isReadonly: true }
        Property { name: "fa_outdent"; type: "string"; isReadonly: true }
        Property { name: "fa_pagelines"; type: "string"; isReadonly: true }
        Property { name: "fa_paint_brush"; type: "string"; isReadonly: true }
        Property { name: "fa_paper_plane"; type: "string"; isReadonly: true }
        Property { name: "fa_paper_plane_o"; type: "string"; isReadonly: true }
        Property { name: "fa_paperclip"; type: "string"; isReadonly: true }
        Property { name: "fa_paragraph"; type: "string"; isReadonly: true }
        Property { name: "fa_paste"; type: "string"; isReadonly: true }
        Property { name: "fa_pause"; type: "string"; isReadonly: true }
        Property { name: "fa_pause_circle"; type: "string"; isReadonly: true }
        Property { name: "fa_pause_circle_o"; type: "string"; isReadonly: true }
        Property { name: "fa_paw"; type: "string"; isReadonly: true }
        Property { name: "fa_paypal"; type: "string"; isReadonly: true }
        Property { name: "fa_pencil"; type: "string"; isReadonly: true }
        Property { name: "fa_pencil_square"; type: "string"; isReadonly: true }
        Property { name: "fa_pencil_square_o"; type: "string"; isReadonly: true }
        Property { name: "fa_percent"; type: "string"; isReadonly: true }
        Property { name: "fa_phone"; type: "string"; isReadonly: true }
        Property { name: "fa_phone_square"; type: "string"; isReadonly: true }
        Property { name: "fa_photo"; type: "string"; isReadonly: true }
        Property { name: "fa_picture_o"; type: "string"; isReadonly: true }
        Property { name: "fa_pie_chart"; type: "string"; isReadonly: true }
        Property { name: "fa_pied_piper"; type: "string"; isReadonly: true }
        Property { name: "fa_pied_piper_alt"; type: "string"; isReadonly: true }
        Property { name: "fa_pinterest"; type: "string"; isReadonly: true }
        Property { name: "fa_pinterest_p"; type: "string"; isReadonly: true }
        Property { name: "fa_pinterest_square"; type: "string"; isReadonly: true }
        Property { name: "fa_plane"; type: "string"; isReadonly: true }
        Property { name: "fa_play"; type: "string"; isReadonly: true }
        Property { name: "fa_play_circle"; type: "string"; isReadonly: true }
        Property { name: "fa_play_circle_o"; type: "string"; isReadonly: true }
        Property { name: "fa_plug"; type: "string"; isReadonly: true }
        Property { name: "fa_plus"; type: "string"; isReadonly: true }
        Property { name: "fa_plus_circle"; type: "string"; isReadonly: true }
        Property { name: "fa_plus_square"; type: "string"; isReadonly: true }
        Property { name: "fa_plus_square_o"; type: "string"; isReadonly: true }
        Property { name: "fa_power_off"; type: "string"; isReadonly: true }
        Property { name: "fa_print"; type: "string"; isReadonly: true }
        Property { name: "fa_product_hunt"; type: "string"; isReadonly: true }
        Property { name: "fa_puzzle_piece"; type: "string"; isReadonly: true }
        Property { name: "fa_qq"; type: "string"; isReadonly: true }
        Property { name: "fa_qrcode"; type: "string"; isReadonly: true }
        Property { name: "fa_question"; type: "string"; isReadonly: true }
        Property { name: "fa_question_circle"; type: "string"; isReadonly: true }
        Property { name: "fa_quote_left"; type: "string"; isReadonly: true }
        Property { name: "fa_quote_right"; type: "string"; isReadonly: true }
        Property { name: "fa_ra"; type: "string"; isReadonly: true }
        Property { name: "fa_random"; type: "string"; isReadonly: true }
        Property { name: "fa_rebel"; type: "string"; isReadonly: true }
        Property { name: "fa_recycle"; type: "string"; isReadonly: true }
        Property { name: "fa_reddit"; type: "string"; isReadonly: true }
        Property { name: "fa_reddit_alien"; type: "string"; isReadonly: true }
        Property { name: "fa_reddit_square"; type: "string"; isReadonly: true }
        Property { name: "fa_refresh"; type: "string"; isReadonly: true }
        Property { name: "fa_registered"; type: "string"; isReadonly: true }
        Property { name: "fa_remove"; type: "string"; isReadonly: true }
        Property { name: "fa_renren"; type: "string"; isReadonly: true }
        Property { name: "fa_reorder"; type: "string"; isReadonly: true }
        Property { name: "fa_repeat"; type: "string"; isReadonly: true }
        Property { name: "fa_reply"; type: "string"; isReadonly: true }
        Property { name: "fa_reply_all"; type: "string"; isReadonly: true }
        Property { name: "fa_retweet"; type: "string"; isReadonly: true }
        Property { name: "fa_rmb"; type: "string"; isReadonly: true }
        Property { name: "fa_road"; type: "string"; isReadonly: true }
        Property { name: "fa_rocket"; type: "string"; isReadonly: true }
        Property { name: "fa_rotate_left"; type: "string"; isReadonly: true }
        Property { name: "fa_rotate_right"; type: "string"; isReadonly: true }
        Property { name: "fa_rouble"; type: "string"; isReadonly: true }
        Property { name: "fa_rss"; type: "string"; isReadonly: true }
        Property { name: "fa_rss_square"; type: "string"; isReadonly: true }
        Property { name: "fa_rub"; type: "string"; isReadonly: true }
        Property { name: "fa_ruble"; type: "string"; isReadonly: true }
        Property { name: "fa_rupee"; type: "string"; isReadonly: true }
        Property { name: "fa_safari"; type: "string"; isReadonly: true }
        Property { name: "fa_save"; type: "string"; isReadonly: true }
        Property { name: "fa_scissors"; type: "string"; isReadonly: true }
        Property { name: "fa_scribd"; type: "string"; isReadonly: true }
        Property { name: "fa_search"; type: "string"; isReadonly: true }
        Property { name: "fa_search_minus"; type: "string"; isReadonly: true }
        Property { name: "fa_search_plus"; type: "string"; isReadonly: true }
        Property { name: "fa_sellsy"; type: "string"; isReadonly: true }
        Property { name: "fa_send"; type: "string"; isReadonly: true }
        Property { name: "fa_send_o"; type: "string"; isReadonly: true }
        Property { name: "fa_server"; type: "string"; isReadonly: true }
        Property { name: "fa_share"; type: "string"; isReadonly: true }
        Property { name: "fa_share_alt"; type: "string"; isReadonly: true }
        Property { name: "fa_share_alt_square"; type: "string"; isReadonly: true }
        Property { name: "fa_share_square"; type: "string"; isReadonly: true }
        Property { name: "fa_share_square_o"; type: "string"; isReadonly: true }
        Property { name: "fa_shekel"; type: "string"; isReadonly: true }
        Property { name: "fa_sheqel"; type: "string"; isReadonly: true }
        Property { name: "fa_shield"; type: "string"; isReadonly: true }
        Property { name: "fa_ship"; type: "string"; isReadonly: true }
        Property { name: "fa_shirtsinbulk"; type: "string"; isReadonly: true }
        Property { name: "fa_shopping_bag"; type: "string"; isReadonly: true }
        Property { name: "fa_shopping_basket"; type: "string"; isReadonly: true }
        Property { name: "fa_shopping_cart"; type: "string"; isReadonly: true }
        Property { name: "fa_sign_in"; type: "string"; isReadonly: true }
        Property { name: "fa_sign_out"; type: "string"; isReadonly: true }
        Property { name: "fa_signal"; type: "string"; isReadonly: true }
        Property { name: "fa_simplybuilt"; type: "string"; isReadonly: true }
        Property { name: "fa_sitemap"; type: "string"; isReadonly: true }
        Property { name: "fa_skyatlas"; type: "string"; isReadonly: true }
        Property { name: "fa_skype"; type: "string"; isReadonly: true }
        Property { name: "fa_slack"; type: "string"; isReadonly: true }
        Property { name: "fa_sliders"; type: "string"; isReadonly: true }
        Property { name: "fa_slideshare"; type: "string"; isReadonly: true }
        Property { name: "fa_smile_o"; type: "string"; isReadonly: true }
        Property { name: "fa_soccer_ball_o"; type: "string"; isReadonly: true }
        Property { name: "fa_sort"; type: "string"; isReadonly: true }
        Property { name: "fa_sort_alpha_asc"; type: "string"; isReadonly: true }
        Property { name: "fa_sort_alpha_desc"; type: "string"; isReadonly: true }
        Property { name: "fa_sort_amount_asc"; type: "string"; isReadonly: true }
        Property { name: "fa_sort_amount_desc"; type: "string"; isReadonly: true }
        Property { name: "fa_sort_asc"; type: "string"; isReadonly: true }
        Property { name: "fa_sort_desc"; type: "string"; isReadonly: true }
        Property { name: "fa_sort_down"; type: "string"; isReadonly: true }
        Property { name: "fa_sort_numeric_asc"; type: "string"; isReadonly: true }
        Property { name: "fa_sort_numeric_desc"; type: "string"; isReadonly: true }
        Property { name: "fa_sort_up"; type: "string"; isReadonly: true }
        Property { name: "fa_soundcloud"; type: "string"; isReadonly: true }
        Property { name: "fa_space_shuttle"; type: "string"; isReadonly: true }
        Property { name: "fa_spinner"; type: "string"; isReadonly: true }
        Property { name: "fa_spoon"; type: "string"; isReadonly: true }
        Property { name: "fa_spotify"; type: "string"; isReadonly: true }
        Property { name: "fa_square"; type: "string"; isReadonly: true }
        Property { name: "fa_square_o"; type: "string"; isReadonly: true }
        Property { name: "fa_stack_exchange"; type: "string"; isReadonly: true }
        Property { name: "fa_stack_overflow"; type: "string"; isReadonly: true }
        Property { name: "fa_star"; type: "string"; isReadonly: true }
        Property { name: "fa_star_half"; type: "string"; isReadonly: true }
        Property { name: "fa_star_half_empty"; type: "string"; isReadonly: true }
        Property { name: "fa_star_half_full"; type: "string"; isReadonly: true }
        Property { name: "fa_star_half_o"; type: "string"; isReadonly: true }
        Property { name: "fa_star_o"; type: "string"; isReadonly: true }
        Property { name: "fa_steam"; type: "string"; isReadonly: true }
        Property { name: "fa_steam_square"; type: "string"; isReadonly: true }
        Property { name: "fa_step_backward"; type: "string"; isReadonly: true }
        Property { name: "fa_step_forward"; type: "string"; isReadonly: true }
        Property { name: "fa_stethoscope"; type: "string"; isReadonly: true }
        Property { name: "fa_sticky_note"; type: "string"; isReadonly: true }
        Property { name: "fa_sticky_note_o"; type: "string"; isReadonly: true }
        Property { name: "fa_stop"; type: "string"; isReadonly: true }
        Property { name: "fa_stop_circle"; type: "string"; isReadonly: true }
        Property { name: "fa_stop_circle_o"; type: "string"; isReadonly: true }
        Property { name: "fa_street_view"; type: "string"; isReadonly: true }
        Property { name: "fa_strikethrough"; type: "string"; isReadonly: true }
        Property { name: "fa_stumbleupon"; type: "string"; isReadonly: true }
        Property { name: "fa_stumbleupon_circle"; type: "string"; isReadonly: true }
        Property { name: "fa_subscript"; type: "string"; isReadonly: true }
        Property { name: "fa_subway"; type: "string"; isReadonly: true }
        Property { name: "fa_suitcase"; type: "string"; isReadonly: true }
        Property { name: "fa_sun_o"; type: "string"; isReadonly: true }
        Property { name: "fa_superscript"; type: "string"; isReadonly: true }
        Property { name: "fa_support"; type: "string"; isReadonly: true }
        Property { name: "fa_table"; type: "string"; isReadonly: true }
        Property { name: "fa_tablet"; type: "string"; isReadonly: true }
        Property { name: "fa_tachometer"; type: "string"; isReadonly: true }
        Property { name: "fa_tag"; type: "string"; isReadonly: true }
        Property { name: "fa_tags"; type: "string"; isReadonly: true }
        Property { name: "fa_tasks"; type: "string"; isReadonly: true }
        Property { name: "fa_taxi"; type: "string"; isReadonly: true }
        Property { name: "fa_television"; type: "string"; isReadonly: true }
        Property { name: "fa_tencent_weibo"; type: "string"; isReadonly: true }
        Property { name: "fa_terminal"; type: "string"; isReadonly: true }
        Property { name: "fa_text_height"; type: "string"; isReadonly: true }
        Property { name: "fa_text_width"; type: "string"; isReadonly: true }
        Property { name: "fa_th"; type: "string"; isReadonly: true }
        Property { name: "fa_th_large"; type: "string"; isReadonly: true }
        Property { name: "fa_th_list"; type: "string"; isReadonly: true }
        Property { name: "fa_thumb_tack"; type: "string"; isReadonly: true }
        Property { name: "fa_thumbs_down"; type: "string"; isReadonly: true }
        Property { name: "fa_thumbs_o_down"; type: "string"; isReadonly: true }
        Property { name: "fa_thumbs_o_up"; type: "string"; isReadonly: true }
        Property { name: "fa_thumbs_up"; type: "string"; isReadonly: true }
        Property { name: "fa_ticket"; type: "string"; isReadonly: true }
        Property { name: "fa_times"; type: "string"; isReadonly: true }
        Property { name: "fa_times_circle"; type: "string"; isReadonly: true }
        Property { name: "fa_times_circle_o"; type: "string"; isReadonly: true }
        Property { name: "fa_tint"; type: "string"; isReadonly: true }
        Property { name: "fa_toggle_down"; type: "string"; isReadonly: true }
        Property { name: "fa_toggle_left"; type: "string"; isReadonly: true }
        Property { name: "fa_toggle_off"; type: "string"; isReadonly: true }
        Property { name: "fa_toggle_on"; type: "string"; isReadonly: true }
        Property { name: "fa_toggle_right"; type: "string"; isReadonly: true }
        Property { name: "fa_toggle_up"; type: "string"; isReadonly: true }
        Property { name: "fa_trademark"; type: "string"; isReadonly: true }
        Property { name: "fa_train"; type: "string"; isReadonly: true }
        Property { name: "fa_transgender"; type: "string"; isReadonly: true }
        Property { name: "fa_transgender_alt"; type: "string"; isReadonly: true }
        Property { name: "fa_trash"; type: "string"; isReadonly: true }
        Property { name: "fa_trash_o"; type: "string"; isReadonly: true }
        Property { name: "fa_tree"; type: "string"; isReadonly: true }
        Property { name: "fa_trello"; type: "string"; isReadonly: true }
        Property { name: "fa_tripadvisor"; type: "string"; isReadonly: true }
        Property { name: "fa_trophy"; type: "string"; isReadonly: true }
        Property { name: "fa_truck"; type: "string"; isReadonly: true }
        Property { name: "fa_try"; type: "string"; isReadonly: true }
        Property { name: "fa_tty"; type: "string"; isReadonly: true }
        Property { name: "fa_tumblr"; type: "string"; isReadonly: true }
        Property { name: "fa_tumblr_square"; type: "string"; isReadonly: true }
        Property { name: "fa_turkish_lira"; type: "string"; isReadonly: true }
        Property { name: "fa_tv"; type: "string"; isReadonly: true }
        Property { name: "fa_twitch"; type: "string"; isReadonly: true }
        Property { name: "fa_twitter"; type: "string"; isReadonly: true }
        Property { name: "fa_twitter_square"; type: "string"; isReadonly: true }
        Property { name: "fa_umbrella"; type: "string"; isReadonly: true }
        Property { name: "fa_underline"; type: "string"; isReadonly: true }
        Property { name: "fa_undo"; type: "string"; isReadonly: true }
        Property { name: "fa_university"; type: "string"; isReadonly: true }
        Property { name: "fa_unlink"; type: "string"; isReadonly: true }
        Property { name: "fa_unlock"; type: "string"; isReadonly: true }
        Property { name: "fa_unlock_alt"; type: "string"; isReadonly: true }
        Property { name: "fa_unsorted"; type: "string"; isReadonly: true }
        Property { name: "fa_upload"; type: "string"; isReadonly: true }
        Property { name: "fa_usb"; type: "string"; isReadonly: true }
        Property { name: "fa_usd"; type: "string"; isReadonly: true }
        Property { name: "fa_user"; type: "string"; isReadonly: true }
        Property { name: "fa_user_md"; type: "string"; isReadonly: true }
        Property { name: "fa_user_plus"; type: "string"; isReadonly: true }
        Property { name: "fa_user_secret"; type: "string"; isReadonly: true }
        Property { name: "fa_user_times"; type: "string"; isReadonly: true }
        Property { name: "fa_users"; type: "string"; isReadonly: true }
        Property { name: "fa_venus"; type: "string"; isReadonly: true }
        Property { name: "fa_venus_double"; type: "string"; isReadonly: true }
        Property { name: "fa_venus_mars"; type: "string"; isReadonly: true }
        Property { name: "fa_viacoin"; type: "string"; isReadonly: true }
        Property { name: "fa_video_camera"; type: "string"; isReadonly: true }
        Property { name: "fa_vimeo"; type: "string"; isReadonly: true }
        Property { name: "fa_vimeo_square"; type: "string"; isReadonly: true }
        Property { name: "fa_vine"; type: "string"; isReadonly: true }
        Property { name: "fa_vk"; type: "string"; isReadonly: true }
        Property { name: "fa_volume_down"; type: "string"; isReadonly: true }
        Property { name: "fa_volume_off"; type: "string"; isReadonly: true }
        Property { name: "fa_volume_up"; type: "string"; isReadonly: true }
        Property { name: "fa_warning"; type: "string"; isReadonly: true }
        Property { name: "fa_wechat"; type: "string"; isReadonly: true }
        Property { name: "fa_weibo"; type: "string"; isReadonly: true }
        Property { name: "fa_weixin"; type: "string"; isReadonly: true }
        Property { name: "fa_whatsapp"; type: "string"; isReadonly: true }
        Property { name: "fa_wheelchair"; type: "string"; isReadonly: true }
        Property { name: "fa_wifi"; type: "string"; isReadonly: true }
        Property { name: "fa_wikipedia_w"; type: "string"; isReadonly: true }
        Property { name: "fa_windows"; type: "string"; isReadonly: true }
        Property { name: "fa_won"; type: "string"; isReadonly: true }
        Property { name: "fa_wordpress"; type: "string"; isReadonly: true }
        Property { name: "fa_wrench"; type: "string"; isReadonly: true }
        Property { name: "fa_xing"; type: "string"; isReadonly: true }
        Property { name: "fa_xing_square"; type: "string"; isReadonly: true }
        Property { name: "fa_y_combinator"; type: "string"; isReadonly: true }
        Property { name: "fa_y_combinator_square"; type: "string"; isReadonly: true }
        Property { name: "fa_yahoo"; type: "string"; isReadonly: true }
        Property { name: "fa_yc"; type: "string"; isReadonly: true }
        Property { name: "fa_yc_square"; type: "string"; isReadonly: true }
        Property { name: "fa_yelp"; type: "string"; isReadonly: true }
        Property { name: "fa_yen"; type: "string"; isReadonly: true }
        Property { name: "fa_youtube"; type: "string"; isReadonly: true }
        Property { name: "fa_youtube_play"; type: "string"; isReadonly: true }
        Property { name: "fa_youtube_square"; type: "string"; isReadonly: true }
        Method { name: "init"; type: "QVariant" }
    }
    Component {
        prototype: "AsemanQuickObject"
        name: "AsemanQml.Base/BackAction 2.0"
        exports: ["AsemanQml.Base/BackAction 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "items"
        Property { name: "active"; type: "bool" }
        Property { name: "callback"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/BottomPanel 2.0"
        exports: ["AsemanQml.Base/BottomPanel 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "item"; type: "QVariant" }
        Property { name: "destroyOnHide"; type: "bool" }
        Method { name: "hide"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickRectangle"
        name: "AsemanQml.Base/Button 2.0"
        exports: ["AsemanQml.Base/Button 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "iconCenter"; type: "bool" }
        Property { name: "press"; type: "bool" }
        Property { name: "enter"; type: "bool" }
        Property { name: "triggeredOnHover"; type: "bool" }
        Property { name: "highlightColor"; type: "QColor" }
        Property { name: "normalColor"; type: "string" }
        Property { name: "hoverColor"; type: "string" }
        Property { name: "textMargin"; type: "double" }
        Property { name: "tooltipColor"; type: "QColor" }
        Property { name: "tooltipTextColor"; type: "QColor" }
        Property { name: "tooltipFont"; type: "QFont" }
        Property { name: "tooltipText"; type: "string" }
        Property { name: "tooltipPosition"; type: "int" }
        Property { name: "text"; type: "string" }
        Property { name: "icon"; type: "QUrl" }
        Property { name: "fontSize"; type: "int" }
        Property { name: "textFont"; type: "QFont" }
        Property { name: "hoverEnabled"; type: "bool" }
        Property { name: "containsMouse"; type: "bool"; isReadonly: true }
        Property { name: "iconHeight"; type: "double" }
        Property { name: "textColor"; type: "QColor" }
        Property { name: "rowWidth"; type: "double" }
        Property { name: "cursorShape"; type: "int" }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/CachedImage 2.0"
        exports: ["AsemanQml.Base/CachedImage 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "cachedSource"; type: "string"; isReadonly: true }
        Property { name: "fileName"; type: "string" }
        Property { name: "radius"; type: "double" }
        Property { name: "source"; type: "string" }
        Property { name: "percent"; type: "double"; isReadonly: true }
        Property { name: "fillMode"; type: "int" }
        Property { name: "asynchronous"; type: "bool" }
        Property { name: "cache"; type: "bool" }
        Property { name: "horizontalAlignment"; type: "int" }
        Property { name: "mirror"; type: "bool" }
        Property { name: "paintedHeight"; type: "double"; isReadonly: true }
        Property { name: "paintedWidth"; type: "double"; isReadonly: true }
        Property { name: "progress"; type: "double"; isReadonly: true }
        Property { name: "smooth"; type: "bool" }
        Property { name: "sourceSize"; type: "QSize" }
        Property { name: "status"; type: "int"; isReadonly: true }
        Property { name: "verticalAlignment"; type: "int" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/CircularProgressBar 2.0"
        exports: ["AsemanQml.Base/CircularProgressBar 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "lineWidth"; type: "double" }
        Property { name: "progress"; type: "double" }
        Property { name: "color"; type: "QColor" }
        Property { name: "running"; type: "bool" }
        Property { name: "progressText"; type: "bool" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/ColorfullListView 2.0"
        exports: ["AsemanQml.Base/ColorfullListView 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "titleBarDefaultColor"; type: "QColor" }
        Property { name: "titleBarDefaultTextColor"; type: "QColor" }
        Property { name: "headersHeight"; type: "double" }
        Property { name: "topMargin"; type: "double" }
        Property { name: "bottomMargin"; type: "double" }
        Property { name: "headerColorDomain"; type: "double" }
        Property { name: "headerColorHeight"; type: "double" }
        Property { name: "delegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "header"; type: "QQmlComponent"; isPointer: true }
        Property { name: "customHeader"; type: "QQmlComponent"; isPointer: true }
        Property { name: "titleBarHeight"; type: "double" }
        Property { name: "titleBarFont"; type: "QFont" }
        Property { name: "titleBarColor"; type: "QColor" }
        Property { name: "verticalVelocity"; type: "double"; isReadonly: true }
        Property { name: "horizontalVelocity"; type: "double"; isReadonly: true }
        Property { name: "contentY"; type: "double" }
        Property { name: "originY"; type: "double"; isReadonly: true }
        Property { name: "model"; type: "QVariant" }
        Property { name: "footer"; type: "QQmlComponent"; isPointer: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "atBegin"; type: "bool"; isReadonly: true }
        Property { name: "atEnd"; type: "bool"; isReadonly: true }
        Property { name: "listScale"; type: "double" }
        Property { name: "listTransformOrigin"; type: "int" }
        Method { name: "positionViewAtBeginning"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickRectangle"
        name: "AsemanQml.Base/CradleBits 2.0"
        exports: ["AsemanQml.Base/CradleBits 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "space"; type: "double" }
        Property { name: "x_pad"; type: "double" }
        Property { name: "index"; type: "int" }
        Method { name: "poke"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/CradleIndicator 2.0"
        exports: ["AsemanQml.Base/CradleIndicator 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "count"; type: "double" }
    }
    Component {
        prototype: "AsemanQuickObject"
        name: "AsemanQml.Base/CrashController 2.0"
        exports: ["AsemanQml.Base/CrashController 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "items"
        Property { name: "logLockFile"; type: "string" }
        Signal { name: "crashed" }
        Signal { name: "safe" }
        Method { name: "stopMonitoring"; type: "QVariant" }
        Method { name: "startMonitoring"; type: "QVariant" }
        Method { name: "unlock"; type: "QVariant" }
        Method { name: "checkCrash"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/CursorPicker 2.0"
        exports: ["AsemanQml.Base/CursorPicker 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "pickerWidth"; type: "double" }
        Property { name: "pickerHeight"; type: "double" }
        Property { name: "moving"; type: "bool" }
        Property { name: "press"; type: "bool" }
        Property { name: "commitBlocker"; type: "bool" }
        Property { name: "pickersVisible"; type: "bool" }
        Property { name: "pickersColor"; type: "QColor" }
        Property { name: "pickersStrokeColor"; type: "QColor" }
        Property { name: "textItem"; type: "QVariant" }
        Property { name: "cursorPosition"; type: "int" }
        Method {
            name: "isPointOnPickers"
            type: "QVariant"
            Parameter { name: "x"; type: "QVariant" }
            Parameter { name: "y"; type: "QVariant" }
        }
        Method { name: "refresh"; type: "QVariant" }
        Method {
            name: "commited"
            type: "QVariant"
            Parameter { name: "item"; type: "QVariant" }
        }
        Method {
            name: "commitedTwo"
            type: "QVariant"
            Parameter { name: "item"; type: "QVariant" }
            Parameter { name: "baseItem"; type: "QVariant" }
        }
        Method { name: "hide"; type: "QVariant" }
        Method { name: "show"; type: "QVariant" }
        Method { name: "commitFaders"; type: "QVariant" }
        Method {
            name: "getItemPosition"
            type: "QVariant"
            Parameter { name: "item"; type: "QVariant" }
        }
        Method { name: "calculateSelection"; type: "QVariant" }
        Method { name: "selectedText"; type: "QVariant" }
        Method { name: "deleteSelectedText"; type: "QVariant" }
        Method { name: "declareSelectedText"; type: "QVariant" }
        Method { name: "initTranslations"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickMouseArea"
        name: "AsemanQml.Base/CursorShapeArea 2.0"
        exports: ["AsemanQml.Base/CursorShapeArea 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickRectangle"
        name: "AsemanQml.Base/DateTimeChooser 2.0"
        exports: ["AsemanQml.Base/DateTimeChooser 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "textsColor"; type: "QColor" }
        Property { name: "dateVisible"; type: "bool" }
        Property { name: "timeVisible"; type: "bool" }
        Property { name: "calendarType"; type: "int" }
        Property { name: "date"; type: "QDateTime" }
        Method { name: "getDate"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/Dialog 2.0"
        exports: ["AsemanQml.Base/Dialog 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "color"; type: "QColor" }
        Property { name: "blockBack"; type: "bool" }
        Property { name: "autoDestroy"; type: "bool" }
        Property { name: "buttons"; type: "QVariant" }
        Property { name: "margins"; type: "double" }
        Property { name: "opened"; type: "bool" }
        Property { name: "title"; type: "string" }
        Property { name: "textColor"; type: "QColor" }
        Property { name: "font"; type: "QFont" }
        Property { name: "delegate"; type: "QQmlComponent"; isPointer: true }
        Signal {
            name: "buttonClicked"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "open"; type: "QVariant" }
        Method { name: "close"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/Drawer 2.0"
        exports: ["AsemanQml.Base/Drawer 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "delegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "item"; type: "QVariant" }
        Property { name: "handleWidth"; type: "double" }
        Property { name: "percent"; type: "double"; isReadonly: true }
        Property { name: "layoutDirection"; type: "int" }
        Property { name: "showed"; type: "bool"; isReadonly: true }
        Property { name: "menuWidth"; type: "double" }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Method { name: "discard"; type: "QVariant" }
        Method { name: "show"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickGridView"
        name: "AsemanQml.Base/FileSystemView 2.0"
        exports: ["AsemanQml.Base/FileSystemView 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "itemsLabelColor"; type: "QColor" }
        Property { name: "gridWidth"; type: "double" }
        Property { name: "root"; type: "string" }
        Property { name: "filters"; type: "QStringList" }
        Property { name: "showDotAndDotDot"; type: "bool" }
        Signal {
            name: "clickedOnFile"
            Parameter { name: "fileUrl"; type: "QVariant" }
        }
        Method { name: "back"; type: "QVariant" }
        Property { name: "tabBarRatio"; type: "double"; isReadonly: true }
        Property { name: "tabBarHeight"; type: "double" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/GetPassDialog 2.0"
        exports: ["AsemanQml.Base/GetPassDialog 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "password"; type: "string" }
        Property { name: "getPassOnly"; type: "bool" }
        Property { name: "backBlur"; type: "QVariant" }
        Property { name: "parentItem"; type: "QVariant" }
        Property { name: "allowBack"; type: "bool" }
        Property { name: "inputMethodHints"; type: "int" }
        Signal { name: "success" }
        Signal {
            name: "passGiven"
            Parameter { name: "pass"; type: "string" }
        }
        Method { name: "done"; type: "QVariant" }
        Method { name: "initTranslations"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickRectangle"
        name: "AsemanQml.Base/Header 2.0"
        exports: ["AsemanQml.Base/Header 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "light"; type: "bool" }
        Property { name: "backButton"; type: "bool" }
        Property { name: "backScale"; type: "double" }
        Property { name: "statusBar"; type: "bool" }
        Property { name: "centerText"; type: "bool" }
        Property { name: "layoutDirection"; type: "int" }
        Property { name: "defaultHeight"; type: "double"; isReadonly: true }
        Property { name: "text"; type: "string" }
        Property { name: "titleFont"; type: "QFont" }
        Property { name: "titleFontSize"; type: "int" }
        Property { name: "backButtonText"; type: "string" }
        Property { name: "shadow"; type: "bool" }
        Property { name: "shadowOpacity"; type: "double" }
        Signal { name: "beginBack" }
        Method { name: "initTranslations"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/HeaderMenuButton 2.0"
        exports: ["AsemanQml.Base/HeaderMenuButton 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "color"; type: "QColor" }
        Property { name: "buttonColor"; type: "QColor" }
        Property { name: "ratio"; type: "double" }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/Indicator 2.0"
        exports: ["AsemanQml.Base/Indicator 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "light"; type: "bool" }
        Property { name: "modern"; type: "bool" }
        Property { name: "indicatorSize"; type: "double" }
        Property { name: "source"; type: "string" }
        Property { name: "running"; type: "bool" }
        Method { name: "start"; type: "QVariant" }
        Method { name: "stop"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickRectangle"
        name: "AsemanQml.Base/LineEdit 2.0"
        exports: ["AsemanQml.Base/LineEdit 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "textSideMargins"; type: "double" }
        Property { name: "clearButton"; type: "bool" }
        Property { name: "placeholder"; type: "string" }
        Property { name: "placeholderColor"; type: "QColor" }
        Property { name: "text"; type: "string" }
        Property { name: "textColor"; type: "QColor" }
        Property { name: "font"; type: "QFont" }
        Property { name: "echoMode"; type: "int" }
        Property { name: "lineFocus"; type: "bool" }
        Property { name: "pickerEnable"; type: "bool" }
        Property { name: "validator"; type: "QValidator"; isPointer: true }
        Signal { name: "accepted" }
        Method { name: "paste"; type: "QVariant" }
        Method { name: "copy"; type: "QVariant" }
        Method { name: "cut"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/MaterialDesignButton 2.0"
        exports: ["AsemanQml.Base/MaterialDesignButton 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "hideState"; type: "bool" }
        Property { name: "opened"; type: "bool" }
        Property { name: "layoutDirection"; type: "int" }
        Property { name: "hasMenu"; type: "bool" }
        Property { name: "list"; type: "QVariant" }
        Property { name: "rotateCount"; type: "int" }
        Property { name: "disable"; type: "bool" }
        Property { name: "flickable"; type: "QQuickFlickable"; isPointer: true }
        Property { name: "icon"; type: "QUrl" }
        Property { name: "color"; type: "QColor" }
        Property { name: "background"; type: "QColor" }
        Signal { name: "clicked" }
        Method { name: "hide"; type: "QVariant" }
        Method { name: "show"; type: "QVariant" }
        Method { name: "close"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/MaterialFrame 2.0"
        exports: ["AsemanQml.Base/MaterialFrame 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "color"; type: "QColor" }
        Property { name: "radius"; type: "double" }
        Property { name: "shadowColor"; type: "QColor" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/MenuController 2.0"
        exports: ["AsemanQml.Base/MenuController 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "ratio"; type: "double" }
        Property { name: "source"; type: "QVariant" }
        Property { name: "layoutDirection"; type: "int" }
        Property { name: "handleWidth"; type: "double" }
        Property { name: "component"; type: "QQmlComponent"; isPointer: true }
        Property { name: "menuWidth"; type: "double" }
        Property { name: "isVisible"; type: "bool" }
        Property { name: "menuTopMargin"; type: "double" }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "animating"; type: "bool" }
        Method { name: "refreshSource"; type: "QVariant" }
        Method { name: "refresh"; type: "QVariant" }
        Method { name: "close"; type: "QVariant" }
        Method { name: "show"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/MenuIcon 2.0"
        exports: ["AsemanQml.Base/MenuIcon 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "color"; type: "QColor" }
        Property { name: "ratio"; type: "double" }
        Property { name: "layoutDirection"; type: "int" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/MessageDialog 2.0"
        exports: ["AsemanQml.Base/MessageDialog 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "frameItem"; type: "QVariant" }
        Method {
            name: "show"
            type: "QVariant"
            Parameter { name: "component"; type: "QVariant" }
            Parameter { name: "args"; type: "QVariant" }
        }
        Method { name: "hide"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickColumn"
        name: "AsemanQml.Base/MessageDialogOkCancelWarning 2.0"
        exports: ["AsemanQml.Base/MessageDialogOkCancelWarning 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "message"; type: "string" }
        Property { name: "okText"; type: "string" }
        Signal { name: "canceled" }
        Signal { name: "ok" }
    }
    Component {
        prototype: "QQuickMouseArea"
        name: "AsemanQml.Base/NormalWheelScroll 2.0"
        exports: ["AsemanQml.Base/NormalWheelScroll 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "flick"; type: "QQuickFlickable"; isPointer: true }
        Property { name: "animated"; type: "bool" }
        Property { name: "reverse"; type: "bool" }
        Property { name: "naturalScroll"; type: "bool" }
        Property { name: "endContentY"; type: "double" }
    }
    Component {
        prototype: "QQuickMouseArea"
        name: "AsemanQml.Base/NullMouseArea 2.0"
        exports: ["AsemanQml.Base/NullMouseArea 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/OSXTitleButtons 2.0"
        exports: ["AsemanQml.Base/OSXTitleButtons 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "closeButton"; type: "bool" }
        Property { name: "minimizeButton"; type: "bool" }
        Property { name: "fullscreenButton"; type: "bool" }
        Property { name: "fullscreened"; type: "bool" }
        Property { name: "hovered"; type: "bool" }
    }
    Component {
        prototype: "QQuickRectangle"
        name: "AsemanQml.Base/PasteButton 2.0"
        exports: ["AsemanQml.Base/PasteButton 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "textItem"; type: "QVariant" }
        Property { name: "textRect"; type: "QRectF" }
        Method { name: "initTranslations"; type: "QVariant" }
        Property { name: "iconCenter"; type: "bool" }
        Property { name: "press"; type: "bool" }
        Property { name: "enter"; type: "bool" }
        Property { name: "triggeredOnHover"; type: "bool" }
        Property { name: "highlightColor"; type: "QColor" }
        Property { name: "normalColor"; type: "string" }
        Property { name: "hoverColor"; type: "string" }
        Property { name: "textMargin"; type: "double" }
        Property { name: "tooltipColor"; type: "QColor" }
        Property { name: "tooltipTextColor"; type: "QColor" }
        Property { name: "tooltipFont"; type: "QFont" }
        Property { name: "tooltipText"; type: "string" }
        Property { name: "tooltipPosition"; type: "int" }
        Property { name: "text"; type: "string" }
        Property { name: "icon"; type: "QUrl" }
        Property { name: "fontSize"; type: "int" }
        Property { name: "textFont"; type: "QFont" }
        Property { name: "hoverEnabled"; type: "bool" }
        Property { name: "containsMouse"; type: "bool"; isReadonly: true }
        Property { name: "iconHeight"; type: "double" }
        Property { name: "textColor"; type: "QColor" }
        Property { name: "rowWidth"; type: "double" }
        Property { name: "cursorShape"; type: "int" }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/PhysicalScrollBar 2.0"
        exports: ["AsemanQml.Base/PhysicalScrollBar 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "scrollArea"; type: "QQuickFlickable"; isPointer: true }
        Property { name: "orientation"; type: "int" }
        Property { name: "reverse"; type: "bool" }
        Property { name: "color"; type: "QColor" }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Method { name: "position"; type: "QVariant" }
        Method { name: "size"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickCanvasItem"
        name: "AsemanQml.Base/Picker 2.0"
        exports: ["AsemanQml.Base/Picker 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "fillColor"; type: "QColor" }
        Property { name: "strokeColor"; type: "QColor" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/PickerHandler 2.0"
        exports: ["AsemanQml.Base/PickerHandler 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "press"; type: "bool"; isReadonly: true }
        Signal { name: "commited" }
        Signal { name: "moved" }
    }
    Component {
        prototype: "AsemanQuickObject"
        name: "AsemanQml.Base/PointMapListener 2.0"
        exports: ["AsemanQml.Base/PointMapListener 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "items"
        Property { name: "source"; type: "QQuickItem"; isPointer: true }
        Property { name: "dest"; type: "QQuickItem"; isPointer: true }
        Property { name: "x"; type: "double" }
        Property { name: "y"; type: "double" }
        Property { name: "result"; type: "QPointF"; isReadonly: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/PointingDialog 2.0"
        exports: ["AsemanQml.Base/PointingDialog 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "item"; type: "QVariant" }
        Property { name: "margin"; type: "double" }
        Property { name: "hoverToClose"; type: "bool" }
        Property { name: "extraX"; type: "double" }
        Property { name: "extraY"; type: "double" }
        Property { name: "pointerLeftMargin"; type: "double" }
        Property { name: "containsMouse"; type: "bool"; isReadonly: true }
        Method { name: "refresh"; type: "QVariant" }
        Method {
            name: "pointingTo"
            type: "QVariant"
            Parameter { name: "x"; type: "QVariant" }
            Parameter { name: "y"; type: "QVariant" }
            Parameter { name: "width"; type: "QVariant" }
            Parameter { name: "height"; type: "QVariant" }
        }
        Method { name: "hide"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickRectangle"
        name: "AsemanQml.Base/ProgressBar 2.0"
        exports: ["AsemanQml.Base/ProgressBar 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "percent"; type: "double" }
        Property { name: "topColor"; type: "QColor" }
        Method {
            name: "setValue"
            type: "QVariant"
            Parameter { name: "p"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QQuickRectangle"
        name: "AsemanQml.Base/QueueList 2.0"
        exports: ["AsemanQml.Base/QueueList 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "currentIndex"; type: "int" }
        Property { name: "dscale"; type: "double" }
        Property { name: "components"; type: "QVariantList" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Method { name: "refresh"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/RollerDialog 2.0"
        exports: ["AsemanQml.Base/RollerDialog 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Method {
            name: "show"
            type: "QVariant"
            Parameter { name: "y1"; type: "QVariant" }
            Parameter { name: "y2"; type: "QVariant" }
            Parameter { name: "item"; type: "QVariant" }
        }
        Method { name: "hide"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/RoundedImage 2.0"
        exports: ["AsemanQml.Base/RoundedImage 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "radius"; type: "double" }
        Property { name: "asynchronous"; type: "bool" }
        Property { name: "cache"; type: "bool" }
        Property { name: "fillMode"; type: "int" }
        Property { name: "horizontalAlignment"; type: "int" }
        Property { name: "mirror"; type: "bool" }
        Property { name: "paintedHeight"; type: "double"; isReadonly: true }
        Property { name: "paintedWidth"; type: "double"; isReadonly: true }
        Property { name: "progress"; type: "double"; isReadonly: true }
        Property { name: "smooth"; type: "bool" }
        Property { name: "source"; type: "QUrl" }
        Property { name: "sourceSize"; type: "QSize" }
        Property { name: "status"; type: "int"; isReadonly: true }
        Property { name: "verticalAlignment"; type: "int" }
    }
    Component {
        prototype: "QQuickTextEdit"
        name: "AsemanQml.Base/STextEdit 2.0"
        exports: ["AsemanQml.Base/STextEdit 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickTextInput"
        name: "AsemanQml.Base/STextInput 2.0"
        exports: ["AsemanQml.Base/STextInput 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/ScrollBar 2.0"
        exports: ["AsemanQml.Base/ScrollBar 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "scrollArea"; type: "QVariant" }
        Property { name: "orientation"; type: "QVariant" }
        Property { name: "forceVisible"; type: "bool" }
        Property { name: "color"; type: "QColor" }
        Method { name: "position"; type: "QVariant" }
        Method { name: "size"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickRectangle"
        name: "AsemanQml.Base/SelectableList 2.0"
        exports: ["AsemanQml.Base/SelectableList 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "items"; type: "QVariant" }
        Property { name: "textsColor"; type: "QColor" }
        Property { name: "splitersColor"; type: "QColor" }
        Property { name: "itemsHeight"; type: "double" }
        Property { name: "nameMethodObject"; type: "QVariant" }
        Property { name: "nameMethodFunction"; type: "string" }
        Property { name: "debugMode"; type: "bool" }
        Property { name: "currentIndex"; type: "int" }
        Method {
            name: "positionViewAtIndex"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
            Parameter { name: "force"; type: "QVariant" }
        }
        Method {
            name: "itemName"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/ShadowRectangle 2.0"
        exports: ["AsemanQml.Base/ShadowRectangle 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "shadowSize"; type: "double" }
        Property { name: "color"; type: "QColor" }
        Property { name: "radius"; type: "double" }
        Property { name: "border"; type: "QQuickPen"; isReadonly: true; isPointer: true }
        Property { name: "shadowOpacity"; type: "double" }
        Property { name: "shadowRadius"; type: "double" }
        Property { name: "visibleShadow"; type: "bool" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/ShareDialog 2.0"
        exports: ["AsemanQml.Base/ShareDialog 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "started"; type: "bool" }
        Property { name: "sources"; type: "QVariant" }
        Method { name: "hide"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/SideMenu 2.0"
        exports: ["AsemanQml.Base/SideMenu 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "menuTypeModern"; type: "int"; isReadonly: true }
        Property { name: "menuTypeMaterial"; type: "int"; isReadonly: true }
        Property { name: "menuType"; type: "int" }
        Property { name: "delegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "source"; type: "QQuickItem"; isPointer: true }
        Property { name: "menuItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "handleWidth"; type: "double" }
        Property { name: "menuWidth"; type: "double" }
        Property { name: "showed"; type: "bool"; isReadonly: true }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "percent"; type: "double"; isReadonly: true }
        Property { name: "layoutDirection"; type: "int" }
        Method { name: "discard"; type: "QVariant" }
        Method { name: "show"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/SlidePageManager 2.0"
        exports: ["AsemanQml.Base/SlidePageManager 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "mainComponent"; type: "QQmlComponent"; isPointer: true }
        Property { name: "currentItem"; type: "QVariant"; isReadonly: true }
        Property { name: "animationDuration"; type: "int" }
        Property { name: "easingType"; type: "int" }
        Property { name: "layoutDirection"; type: "int" }
        Property { name: "direction"; type: "int" }
        Property { name: "mainItem"; type: "QVariant" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Method {
            name: "append"
            type: "QVariant"
            Parameter { name: "component"; type: "QVariant" }
            Parameter { name: "properties"; type: "QVariant" }
        }
        Method { name: "closeLast"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/Slider 2.0"
        exports: ["AsemanQml.Base/Slider 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "maximum"; type: "double" }
        Property { name: "value"; type: "double" }
        Property { name: "backColor"; type: "QColor" }
        Property { name: "backRadius"; type: "double" }
        Property { name: "backBorder"; type: "QQuickPen"; isReadonly: true; isPointer: true }
        Property { name: "backHeight"; type: "double" }
        Property { name: "seekerColor"; type: "QColor" }
        Property { name: "seekerBorder"; type: "QQuickPen"; isReadonly: true; isPointer: true }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
    }
    Component {
        prototype: "AsemanQmlSmartComponent"
        name: "AsemanQml.Base/SmartComponent 2.0"
        exports: ["AsemanQml.Base/SmartComponent 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        Method { name: "createLocalComponent"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/SubMessage 2.0"
        exports: ["AsemanQml.Base/SubMessage 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "item"; type: "QVariant" }
        Property { name: "source"; type: "QVariant" }
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "blurBack"; type: "bool" }
        Method { name: "hide"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/TabBar 2.0"
        exports: ["AsemanQml.Base/TabBar 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "minimumWidth"; type: "double" }
        Property { name: "highlightColor"; type: "QColor" }
        Property { name: "textColor"; type: "QColor" }
        Property { name: "fontSize"; type: "double" }
        Property { name: "displayRole"; type: "string" }
        Property { name: "color"; type: "QColor" }
        Property { name: "model"; type: "QVariant" }
        Property { name: "currentIndex"; type: "int" }
        Property { name: "layoutDirection"; type: "int" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/TabView 2.0"
        exports: ["AsemanQml.Base/TabView 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "minimumTabSize"; type: "double" }
        Property { name: "maximumTabSize"; type: "double" }
        Property { name: "tabsHeight"; type: "double" }
        Property { name: "model"; type: "QVariant" }
        Property { name: "currentIndex"; type: "int" }
    }
    Component {
        prototype: "QQuickTextEdit"
        name: "AsemanQml.Base/TextAreaCore 2.0"
        exports: ["AsemanQml.Base/TextAreaCore 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "press"; type: "bool" }
        Property { name: "commitBlocker"; type: "bool" }
        Property { name: "pickersVisible"; type: "bool" }
        Property { name: "pickerEnable"; type: "bool" }
        Property { name: "placeholder"; type: "string" }
        Property { name: "placeholderColor"; type: "QColor" }
        Property { name: "pickersColor"; type: "QColor" }
        Property { name: "pickersStrokeColor"; type: "QColor" }
        Method {
            name: "isPointOnPickers"
            type: "QVariant"
            Parameter { name: "x"; type: "QVariant" }
            Parameter { name: "y"; type: "QVariant" }
        }
        Method { name: "commitFaders"; type: "QVariant" }
        Method { name: "showPicker"; type: "QVariant" }
        Method { name: "hidePicker"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickTextInput"
        name: "AsemanQml.Base/TextLineCore 2.0"
        exports: ["AsemanQml.Base/TextLineCore 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "press"; type: "bool" }
        Property { name: "commitBlocker"; type: "bool" }
        Property { name: "pickerEnable"; type: "bool" }
        Property { name: "pickersColor"; type: "QColor" }
        Property { name: "pickersStrokeColor"; type: "QColor" }
        Method {
            name: "isPointOnPickers"
            type: "QVariant"
            Parameter { name: "x"; type: "QVariant" }
            Parameter { name: "y"; type: "QVariant" }
        }
        Method { name: "commitFaders"; type: "QVariant" }
        Method { name: "showPicker"; type: "QVariant" }
        Method { name: "hidePicker"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/Tooltip 2.0"
        exports: ["AsemanQml.Base/Tooltip 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "interval"; type: "int" }
        Property { name: "padding"; type: "double" }
        Property { name: "textFont"; type: "QFont" }
        Property { name: "textColor"; type: "QColor" }
        Property { name: "color"; type: "QColor" }
        Method {
            name: "showText"
            type: "QVariant"
            Parameter { name: "text"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Multimedia/VideoPlayer 2.0"
        exports: ["AsemanQml.Multimedia/VideoPlayer 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "controlsVisibled"; type: "bool" }
        Property { name: "playing"; type: "bool"; isReadonly: true }
        Property { name: "loading"; type: "bool"; isReadonly: true }
        Property { name: "color"; type: "QColor" }
        Property { name: "background"; type: "QColor" }
        Property { name: "blur"; type: "bool" }
        Property { name: "source"; type: "QUrl" }
        Property { name: "title"; type: "string" }
        Method { name: "play"; type: "QVariant" }
        Method { name: "pause"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/WindowDragArea 2.0"
        exports: ["AsemanQml.Base/WindowDragArea 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Base/WindowResizeGrip 2.0"
        exports: ["AsemanQml.Base/WindowResizeGrip 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
}
