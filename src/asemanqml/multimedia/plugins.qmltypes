import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable AsemanQml.Multimedia 2.0'

Module {
    dependencies: [
        "AsemanQml.Awesome 2.0",
        "AsemanQml.Base 2.0",
        "QtGraphicalEffects 1.12",
        "QtMultimedia 5.11",
        "QtQuick 2.13",
        "QtQuick.Controls 2.5",
        "QtQuick.Controls.Fusion 2.13",
        "QtQuick.Controls.Fusion.impl 2.12",
        "QtQuick.Controls.Imagine 2.13",
        "QtQuick.Controls.Imagine.impl 2.13",
        "QtQuick.Controls.Material 2.13",
        "QtQuick.Controls.Material.impl 2.12",
        "QtQuick.Controls.Universal 2.13",
        "QtQuick.Controls.Universal.impl 2.12",
        "QtQuick.Controls.impl 2.13",
        "QtQuick.Layouts 1.2",
        "QtQuick.Templates 2.13",
        "QtQuick.Window 2.2"
    ]
    Component {
        name: "AsemanAudioEncoderSettings"
        prototype: "QObject"
        exports: ["AsemanQml.Multimedia/AudioEncoderSettings 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "EncodingQuality"
            values: {
                "VeryLowQuality": 0,
                "LowQuality": 1,
                "NormalQuality": 2,
                "HighQuality": 3,
                "VeryHighQuality": 4
            }
        }
        Enum {
            name: "EncodingMode"
            values: {
                "ConstantQualityEncoding": 0,
                "ConstantBitRateEncoding": 1,
                "AverageBitRateEncoding": 2,
                "TwoPassEncoding": 3
            }
        }
        Property { name: "bitRate"; type: "int" }
        Property { name: "channelCount"; type: "int" }
        Property { name: "codec"; type: "string" }
        Property { name: "encodingMode"; type: "int" }
        Property { name: "encodingOptions"; type: "QVariantMap" }
        Property { name: "quality"; type: "int" }
        Property { name: "sampleRate"; type: "int" }
    }
    Component {
        name: "AsemanAudioRecorder"
        prototype: "QObject"
        exports: ["AsemanQml.Multimedia/AudioRecorder 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "State"
            values: {
                "StoppedState": 0,
                "RecordingState": 1,
                "PausedState": 2
            }
        }
        Enum {
            name: "Status"
            values: {
                "UnavailableStatus": 0,
                "UnloadedStatus": 1,
                "LoadingStatus": 2,
                "LoadedStatus": 3,
                "StartingStatus": 4,
                "RecordingStatus": 5,
                "PausedStatus": 6,
                "FinalizingStatus": 7
            }
        }
        Property { name: "encoderSettings"; type: "AsemanAudioEncoderSettings"; isPointer: true }
        Property { name: "output"; type: "QUrl" }
        Property { name: "mute"; type: "bool" }
        Property { name: "available"; type: "bool"; isReadonly: true }
        Property { name: "availability"; type: "int"; isReadonly: true }
        Property { name: "state"; type: "int"; isReadonly: true }
        Property { name: "status"; type: "int"; isReadonly: true }
        Property { name: "volume"; type: "double" }
        Property { name: "audioInput"; type: "string" }
        Property { name: "audioInputs"; type: "QStringList"; isReadonly: true }
        Method { name: "stop" }
        Method { name: "pause" }
        Method { name: "record" }
    }
    Component {
        name: "AsemanMultimediaDatabase"
        prototype: "QObject"
        exports: ["AsemanQml.Multimedia/MultimediaDatabase 2.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method { name: "getAllMusics"; type: "QVariantList" }
        Method { name: "getAllAlbums"; type: "QVariantList" }
        Method { name: "getAllArtists"; type: "QVariantList" }
        Method {
            name: "getArtistAlbums"
            type: "QVariantList"
            Parameter { name: "artistId"; type: "string" }
        }
        Method {
            name: "getArtistSongs"
            type: "QVariantList"
            Parameter { name: "artistId"; type: "string" }
        }
        Method {
            name: "getAlbumSongs"
            type: "QVariantList"
            Parameter { name: "albumId"; type: "string" }
        }
    }
    Component {
        prototype: "QQuickItem"
        name: "AsemanQml.Multimedia/VideoPlayer 2.0"
        exports: ["AsemanQml.Multimedia/VideoPlayer 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "controlsVisibled"; type: "bool" }
        Property { name: "playing"; type: "bool"; isReadonly: true }
        Property { name: "loading"; type: "bool"; isReadonly: true }
        Property { name: "color"; type: "QColor" }
        Property { name: "background"; type: "QColor" }
        Property { name: "blur"; type: "bool" }
        Property { name: "source"; type: "QUrl" }
        Property { name: "title"; type: "string" }
        Method { name: "play"; type: "QVariant" }
        Method { name: "pause"; type: "QVariant" }
    }
}
