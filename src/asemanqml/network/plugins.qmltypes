import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable AsemanQml.Network 2.0'

Module {
    dependencies: ["QtQuick 2.12"]
    Component {
        name: "AsemanFileDownloaderQueue"
        prototype: "QObject"
        exports: ["AsemanQml.Network/DownloaderQueue 2.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "capacity"; type: "int" }
        Property { name: "destination"; type: "string" }
        Signal {
            name: "finished"
            Parameter { name: "url"; type: "string" }
            Parameter { name: "fileName"; type: "string" }
        }
        Signal {
            name: "progressChanged"
            Parameter { name: "url"; type: "string" }
            Parameter { name: "fileName"; type: "string" }
            Parameter { name: "percent"; type: "double" }
        }
        Method {
            name: "download"
            Parameter { name: "url"; type: "string" }
            Parameter { name: "fileName"; type: "string" }
            Parameter { name: "header"; type: "QVariantMap" }
        }
        Method {
            name: "download"
            Parameter { name: "url"; type: "string" }
            Parameter { name: "fileName"; type: "string" }
        }
    }
    Component {
        name: "AsemanNetworkRequestManager"
        prototype: "QObject"
        exports: ["AsemanQml.Network/NetworkRequestManager 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "boundaryToken"; type: "string" }
        Property { name: "ignoreSslErrors"; type: "bool" }
        Method {
            name: "get"
            type: "AsemanNetworkRequestReply*"
            Parameter { name: "request"; type: "AsemanNetworkRequestObject"; isPointer: true }
            Parameter { name: "ignoreEmptyValues"; type: "bool" }
        }
        Method {
            name: "get"
            type: "AsemanNetworkRequestReply*"
            Parameter { name: "request"; type: "AsemanNetworkRequestObject"; isPointer: true }
        }
        Method {
            name: "post"
            type: "AsemanNetworkRequestReply*"
            Parameter { name: "request"; type: "AsemanNetworkRequestObject"; isPointer: true }
            Parameter { name: "ignoreEmptyValues"; type: "bool" }
        }
        Method {
            name: "post"
            type: "AsemanNetworkRequestReply*"
            Parameter { name: "request"; type: "AsemanNetworkRequestObject"; isPointer: true }
        }
        Method {
            name: "put"
            type: "AsemanNetworkRequestReply*"
            Parameter { name: "request"; type: "AsemanNetworkRequestObject"; isPointer: true }
            Parameter { name: "ignoreEmptyValues"; type: "bool" }
        }
        Method {
            name: "put"
            type: "AsemanNetworkRequestReply*"
            Parameter { name: "request"; type: "AsemanNetworkRequestObject"; isPointer: true }
        }
        Method {
            name: "patch"
            type: "AsemanNetworkRequestReply*"
            Parameter { name: "request"; type: "AsemanNetworkRequestObject"; isPointer: true }
            Parameter { name: "ignoreEmptyValues"; type: "bool" }
        }
        Method {
            name: "patch"
            type: "AsemanNetworkRequestReply*"
            Parameter { name: "request"; type: "AsemanNetworkRequestObject"; isPointer: true }
        }
        Method {
            name: "deleteMethod"
            type: "AsemanNetworkRequestReply*"
            Parameter { name: "request"; type: "AsemanNetworkRequestObject"; isPointer: true }
            Parameter { name: "ignoreEmptyValues"; type: "bool" }
        }
        Method {
            name: "deleteMethod"
            type: "AsemanNetworkRequestReply*"
            Parameter { name: "request"; type: "AsemanNetworkRequestObject"; isPointer: true }
        }
        Method {
            name: "customMethod"
            type: "AsemanNetworkRequestReply*"
            Parameter { name: "method"; type: "string" }
            Parameter { name: "request"; type: "AsemanNetworkRequestObject"; isPointer: true }
            Parameter { name: "ignoreEmptyValues"; type: "bool" }
        }
        Method {
            name: "customMethod"
            type: "AsemanNetworkRequestReply*"
            Parameter { name: "method"; type: "string" }
            Parameter { name: "request"; type: "AsemanNetworkRequestObject"; isPointer: true }
        }
    }
    Component {
        name: "AsemanNetworkRequestObject"
        defaultProperty: "items"
        prototype: "AsemanQuickObject"
        exports: ["AsemanQml.Network/NetworkRequest 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ContentType"
            values: {
                "TypeJson": 0,
                "TypeForm": 1,
                "TypeWWWForm": 2,
                "TypeNone": 3
            }
        }
        Property { name: "response"; type: "QVariant"; isReadonly: true }
        Property { name: "data"; type: "QVariant" }
        Property { name: "cachedData"; type: "QVariant" }
        Property { name: "contentType"; type: "int" }
        Property { name: "status"; type: "int"; isReadonly: true }
        Property { name: "refreshing"; type: "bool"; isReadonly: true }
        Property { name: "error"; type: "string"; isReadonly: true }
        Property { name: "sslErrors"; type: "string"; isReadonly: true }
        Property { name: "ignoreKeys"; type: "QStringList" }
        Property { name: "ignoreRegExp"; type: "QRegExp" }
        Property { name: "cachePath"; type: "string" }
        Property { name: "headers"; type: "QVariantMap" }
        Property { name: "url"; type: "QUrl" }
        Property { name: "ignoreSslErrors"; type: "bool" }
        Signal {
            name: "successfull"
            Parameter { name: "status"; type: "int" }
        }
        Signal {
            name: "unsuccessfull"
            Parameter { name: "status"; type: "int" }
        }
        Signal {
            name: "clientError"
            Parameter { name: "status"; type: "int" }
        }
        Signal {
            name: "serverError"
            Parameter { name: "status"; type: "int" }
        }
        Signal {
            name: "uploadProgress"
            Parameter { name: "bytesSent"; type: "qlonglong" }
            Parameter { name: "bytesTotal"; type: "qlonglong" }
        }
        Signal {
            name: "downloadProgress"
            Parameter { name: "bytesReceived"; type: "qlonglong" }
            Parameter { name: "bytesTotal"; type: "qlonglong" }
        }
        Method { name: "toMap"; type: "QVariantMap" }
        Method {
            name: "fromMap"
            Parameter { name: "map"; type: "QVariantMap" }
        }
        Method { name: "toJson"; type: "string" }
        Method {
            name: "fromJson"
            Parameter { name: "json"; type: "string" }
        }
        Method {
            name: "toFormData"
            type: "string"
            Parameter { name: "ignoreEmpty"; type: "bool" }
        }
        Method { name: "toFormData"; type: "string" }
        Method {
            name: "fromFormData"
            Parameter { name: "formData"; type: "string" }
        }
        Method { name: "properties"; type: "QStringList" }
    }
    Component {
        name: "AsemanNetworkRequestReply"
        prototype: "QObject"
        exports: ["AsemanQml.Network/NetworkRequestReply 2.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Signal {
            name: "finished"
            Parameter { name: "status"; type: "int" }
            Parameter { name: "data"; type: "QByteArray" }
        }
        Signal {
            name: "uploadProgress"
            Parameter { name: "bytesSent"; type: "qlonglong" }
            Parameter { name: "bytesTotal"; type: "qlonglong" }
        }
        Signal {
            name: "downloadProgress"
            Parameter { name: "bytesReceived"; type: "qlonglong" }
            Parameter { name: "bytesTotal"; type: "qlonglong" }
        }
        Signal {
            name: "error"
            Parameter { name: "errorString"; type: "string" }
            Parameter { name: "errorCode"; type: "QNetworkReply::NetworkError" }
        }
        Method { name: "abort" }
    }
    Component {
        name: "AsemanQuickObject"
        defaultProperty: "items"
        prototype: "QObject"
        Property { name: "items"; type: "QObject"; isList: true; isReadonly: true }
    }
}
